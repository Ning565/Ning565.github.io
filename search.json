[{"title":"Day0","url":"/2024/03/15/Day0/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"密码错误，请重试\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"d33c61a5e286dccfd0028e5da925c6d0e498bf15079291d034261a0057c1b6de\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-up\">\n      <input class=\"hbe hbe-input-field hbe-input-field-up\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-up\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-up\">内容加密，输入密码后阅读</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["进厂学习记录"]},{"title":"Hello World","url":"/2024/02/01/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very\r\nfirst post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for\r\nmore info. If you get any problems when using Hexo, you can find the\r\nanswer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or\r\nyou can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\r\n<h2 id=\"quick-start\">Quick Start</h2>\r\n<h3 id=\"create-a-new-post\">Create a new post</h3>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\r\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\r\n<h3 id=\"run-server\">Run server</h3>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\r\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\r\n<h3 id=\"generate-static-files\">Generate static files</h3>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\r\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\r\n<h3 id=\"deploy-to-remote-sites\">Deploy to remote sites</h3>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\r\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\r\n"},{"title":"test","url":"/2024/02/02/test/","content":"<h1 id=\"图片测试\">图片测试</h1>\r\n<p>此mark笔记文档专门来测试图片的样式</p>\r\n<figure>\r\n<img src=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/WEB.png\" alt=\"WEB\">\r\n<figcaption aria-hidden=\"true\">WEB</figcaption>\r\n</figure>\r\n"},{"title":"Markdown入门语法","url":"/2024/02/02/Markdown%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/","content":"<h1 id=\"markdown笔记\">Markdown笔记</h1>\r\n<h2 id=\"标题\">标题</h2>\r\n<p>标题用两个“## XX”加回车即出来,几个#表示几级标题，勿忘空格！</p>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"字体\">字体</h2>\r\n<p><strong>加粗</strong> ：两个<em> </em>倾斜* ：一个<em>\r\n三个</em>就是加粗加倾斜啦 <del>删除线</del>：两个~</p>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**加粗**</span></span><br><span class=\"line\"><span class=\"emphasis\">*倾斜*</span></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*加粗+倾斜*</span>**</span></span><br><span class=\"line\">~删除~</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"引用\">引用</h2>\r\n<blockquote>\r\n<p>搭建自己的博客，记录自己的笔记，走自己的路</p>\r\n</blockquote>\r\n<blockquote>\r\n<p>用一个英文的&gt;来表示引用</p>\r\n</blockquote>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 引用内容</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"分割线\">分割线</h2>\r\n<h3 id=\"法1手动分割bushi\">法1：<del>手动分割</del>(bushi</h3>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">前后各两个~~ 分割 ~~</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"法2三个减号\">法2：三个减号</h3>\r\n<hr>\r\n<p>分割内容</p>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"><span class=\"section\">分割内容 </span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\">分割内容</span><br><span class=\"line\"><span class=\"strong\">*** </span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"图片\">图片</h2>\r\n<figure>\r\n<img src=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/2021020418415889.jpg\" alt=\"科技未来\">\r\n<figcaption aria-hidden=\"true\">科技未来</figcaption>\r\n</figure>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">图片名称，可自命名</span>](<span class=\"link\">图片地址，可以是本地or网页/外部地址</span>)</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"超链接\">超链接</h2>\r\n<p><a href=\"https://editor.csdn.net/md?not_checkout=1&amp;articleId=113662396\">XDUNing的第一篇博客</a>\r\n一个[超链接名称]（）小括号里面是地址</p>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">超链接名称</span>](<span class=\"link\">超链接地址</span>)</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"列表\">列表</h2>\r\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> 减号空格（无序）</span><br><span class=\"line\"><span class=\"bullet\">1.</span> 数字空格有序</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"表格\">表格</h2>\r\n<p>直接插入把，这个a little difficult</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>ctrl + T (Typora)</th>\r\n<th></th>\r\n<th></th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>四行三列的表格</td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>段落 -&gt; 表格 -&gt; 插入表格</td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"公式\">公式</h2>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">latex的公式形式：</span><br><span class=\"line\">$行内公式内容$</span><br><span class=\"line\">$$</span><br><span class=\"line\">行间公式</span><br><span class=\"line\">\\\\</span><br><span class=\"line\">行间公式</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\r\n<p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.93ex\" height=\"1.756ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 3947 776\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(806.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1862.6,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2513.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3514,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/></g></g></g></svg></mjx-container></span></p>\r\n<p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.777ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.747ex\" height=\"4.075ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1457.6 10496.2 1800.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(714,-150) scale(0.707)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1397.5,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2453.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"munderover\" transform=\"translate(2842.2,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,477.1) scale(0.707)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1089,-285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(345,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(1123,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5295.5,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(5573.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(6694.7,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(7694.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msup\" transform=\"translate(8511.9,0)\"><g data-mml-node=\"mo\" transform=\"translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(311,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g></g></g><g data-mml-node=\"msup\" transform=\"translate(9228.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(422,592.7) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mstyle\" transform=\"scale(1.414)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mn\" transform=\"translate(221.1,394) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(220,-345) scale(0.707)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><rect width=\"555.7\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></g></g></g></g></svg></mjx-container></span></p>\r\n<p>## 代码</p>\r\n<p><code>#include&lt;stdio.h&gt;</code></p>\r\n<p><code>int main()</code></p>\r\n<p><code>#includ&lt;stdio.h&gt;</code></p>\r\n<ul>\r\n<li>一个点表示一个代码语句</li>\r\n<li>三个`表示一个代码块</li>\r\n</ul>\r\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">​```三个点点代码块，`一个点代码语句</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure></p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> calss <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Hello,World\"</span>)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\r\n","categories":["入门使用"]},{"title":"博客搭建与发布教程","url":"/2024/03/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%8F%91%E5%B8%83%E6%95%99%E7%A8%8B/","content":"<p><strong>记录一下博客搭建的整个历程，包括日后新增一些实现的功能</strong></p>\r\n<h1 id=\"博客搭建\">博客搭建</h1>\r\n<p>主要参考：<a href=\"https://blog.csdn.net/qq_62928039/article/details/130248518\">Hexo+GitHub搭建个人博客教程（2023最新版）_hexo\r\ngithub个人网站教程-CSDN博客</a></p>\r\n<p><em>这篇CSDN的搭建教程，感谢博主，以下教程纯属自用，一些图片也是摘自此博主的</em></p>\r\n<p><strong>搭建思路：</strong></p>\r\n<p>1.利用<a href=\"https://hexo.io/zh-cn/index.html\">Hexo</a>\r\n一款快速、简洁且高效的博客框架，允许用户使用Markdown语言编写内容，并渲染成静态网页，其相当于一个网站的主题模块；</p>\r\n<p>2.利用GithubPages：Github Pages 是 Github\r\n官方提供的一个静态站点托管服务，它允许用户将 GitHub\r\n仓库中的代码转换为可访问的网站。借助 Github\r\nPages，我们不需要购买服务器也能部署我们的网站。</p>\r\n<p>这两款工具进行博客的整体搭建</p>\r\n<h2 id=\"安装本地环境\">1.1 安装本地环境</h2>\r\n<h3 id=\"node.js环境\"><strong>1.node.js环境：</strong></h3>\r\n<p>安装 nodejs， 因为Hexo是基于 Node.js 驱动的一款博客框架：<a href=\"http://nodejs.cn/\">下载地址</a></p>\r\n<h3 id=\"git环境\"><strong>2.git环境：</strong></h3>\r\n<p>Git\r\n是一种<strong>分布式版本控制系统</strong>，即，代码的本地克隆就是一个完整的版本控制存储库，利用git可以进行版本控制，<strong>内容管理</strong></p>\r\n<figure>\r\n<img src=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/git-process.png\" alt=\"git工作流程\">\r\n<figcaption aria-hidden=\"true\">git工作流程</figcaption>\r\n</figure>\r\n<p>Git\r\n各平台安装包下载地址为：http://git-scm.com/downloads，一路next；</p>\r\n<p><strong>安装完毕后的检查</strong>——打开cmd命令</p>\r\n<p><strong>查看node.js版本：</strong>node -v</p>\r\n<p><strong>查看git版本：</strong>git --version</p>\r\n<p>在开始菜单里找到\"Git\"-&gt;\"Git Bash\"，会弹出 Git\r\n命令窗口，你可以在该窗口进行 Git\r\n操作；或在桌面或文件夹任意位置右键，列表中会出现：<strong>Open Git GUI\r\nhere 和 Open Git Bash here</strong></p>\r\n<p>接下来创建一个文件夹，是存放你的博客的目录，如D-&gt;blog文件夹（后续我们称为博客根目录），在当前文件夹中，右键，点击Open\r\nGit Bash here，在弹出的Git命令窗口进行如下操作</p>\r\n<h3 id=\"安装hexo\"><strong>3.安装hexo</strong>：</h3>\r\n<p>首先为了防止网络问题（国外服务器），先安装配置镜像：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\r\n<p>然后安装hexo和初始化</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cnpm install -g hexo-cli</span><br><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\r\n<p>初始化成功后文件夹会出现许多文件：</p>\r\n<ol type=\"1\">\r\n<li>**__config.yml**：这是 Hexo\r\n的配置文件，你可以在这里设置博客的各种配置选项，比如标题、描述、主题等。</li>\r\n<li><strong>node_modules</strong>：这个文件夹包含了博客依赖的所有\r\nNode.js 模块，例如 Hexo 自身和其他插件。</li>\r\n<li><strong>scaffolds</strong>：在这个文件夹中，你可以放置一些模板文件，用于创建新文章或页面时的默认结构。</li>\r\n<li><strong>source</strong>：这个文件夹包含了你的博客的源文件，比如文章、页面、静态资源等。</li>\r\n<li><strong>themes</strong>：在这里存放着博客的主题文件，你可以根据需要选择或自定义主题。</li>\r\n<li><strong>db.json</strong>：这是 Hexo\r\n的数据库文件，用于存储一些数据，比如文章列表、标签等。</li>\r\n<li><strong>package.json</strong> 和\r\n<strong>package-lock.json</strong>：这两个文件是 Node.js\r\n项目的配置文件，包含了项目的依赖信息和版本信息。</li>\r\n<li><strong>public</strong>：这个文件夹包含了生成的静态网页文件，当你执行\r\n<code>hexo generate</code> 命令后，生成的 HTML 文件就会保存在这里</li>\r\n</ol>\r\n<p>hexo\r\ninit以后，现在已经有一个默认的本地博客了，可以先预览看看，还会默认克隆一个\r\nLandscape 主题，这个默认的博客样式主题就是Landscape</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo server(hexo s)</span><br></pre></td></tr></table></figure>\r\n<p>命令行在运行，别关闭，然后打开浏览器，地址栏输入：localhost:4000</p>\r\n<p>即可看到第一篇默认的博客Hello World</p>\r\n<h2 id=\"github环境\">1.2 Github环境</h2>\r\n<p>注册Github账号并创建仓库，<a href=\"https://github.com/\">GitHub官网</a></p>\r\n<figure>\r\n<img src=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/eb7ebaec9e44a81ceb10449723eb93de.png\" alt=\"Github创建博客仓库\">\r\n<figcaption aria-hidden=\"true\">Github创建博客仓库</figcaption>\r\n</figure>\r\n<figure>\r\n<img src=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/541e294e44c08b6688a68385859c60a6.png\" alt=\"Github创建博客仓库\">\r\n<figcaption aria-hidden=\"true\">Github创建博客仓库</figcaption>\r\n</figure>\r\n<p><strong>注意选择public</strong>\r\n<strong>注意仓库的取名格式：用户名.github.io(这将是以后的访问域名)</strong></p>\r\n<p>next以后会出现可选https和ssh，选择ssh</p>\r\n<h2 id=\"本地gitpage绑定\">1.3 本地GitPage绑定</h2>\r\n<p>我们首先设置ssh连接，SSH key 和 GitHub 绑定有以下几个好处：</p>\r\n<p>使用\r\nSSH，即安全外壳协议，可以加密通信内容，提高了数据传输的安全性。通过 SSH\r\nkey\r\n鉴权，可以避免传统密码登录方式可能存在的风险，增强账户的安全性，一旦将\r\nSSH key 添加到 GitHub 上，就无需每次使用 Git\r\n操作时都输入用户名和密码，减少了输入密码的繁琐过程，提高了工作效率，而且可以设置github上的SSH\r\nkey的有效时间，不用频繁更改加密连接；</p>\r\n<p><strong>首先在git Bash下</strong> 输入命令：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd ~/.ssh           //进入.ssh文件</span><br><span class=\"line\">ssh-keygen -t rsa -C ‘注册时的邮箱地址(你的github邮箱地址)’</span><br></pre></td></tr></table></figure>\r\n<p>接着去查看C盘目录(此文件夹所在C:)，然后在记事本中打开id_rsa.put文件并复制生成的key（或者使用everything时间搜索id_rsa.put），这个时候生成了一个密钥</p>\r\n<p>将密钥配置到Github中：</p>\r\n<p><strong>在GitHub主页的头像下找到seething</strong> -&gt;\r\n<strong>然后点击SSH and GPG keys，点击New SSH key</strong></p>\r\n<p><strong>将刚刚在.ssh目录下所复制的id_rsa.put文件中的信息复制进key(注意空格)（名字随意）</strong></p>\r\n<p>接下来进行验证：</p>\r\n<p>在git中输入命令进行ssh验证：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com 并且输入yes之后，行末尾会显示你的用户名</span><br></pre></td></tr></table></figure>\r\n<p>会受到邮件提醒，成功绑定~</p>\r\n<p>然后输入命令进行本地绑定与Github的用户名和邮箱（git）：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name “注册时用户名”</span><br><span class=\"line\">git config --global user.email “注册时邮箱”</span><br></pre></td></tr></table></figure>\r\n<p>这样便连接完毕本地和Github了</p>\r\n<h2 id=\"博客访问域名\">1.4 博客访问域名</h2>\r\n<p>找到直接创建博客文件夹中的 _config.yml</p>\r\n<p>把文章末尾改成：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">        type: git</span><br><span class=\"line\">        repo: https://github.com/用户名/用户名.github.io.git</span><br><span class=\"line\"></span><br><span class=\"line\">                    （或者git@github.com:用户名/用户名.github.io.git）【推荐，我是用这个成功了，第一个未成功】</span><br><span class=\"line\">        branch: main(一定是main不能是master!!!)</span><br></pre></td></tr></table></figure>\r\n<p>注意，上面的type\r\nrepo和branch后面都有一个英文空格，输入以后保存文件，退出，博客便绑定成功</p>\r\n<h1 id=\"博客日常运行\">博客日常运行</h1>\r\n<p>我们刚才安装hexo时的的npm(Node Package Manager)和cnpm(淘宝镜像)都是\r\nNode.js 的包管理工具，用于在 Node.js\r\n项目中安装、升级、删除和管理依赖包，可以理解成<strong>应用商店</strong>，直接从此下载，类似conda\r\npip等命令</p>\r\n<h2 id=\"博客基本发布\">2.1 博客基本发布</h2>\r\n<p>hexo中带有很多的模块工具包以供我们使用，注意，此时你的hexo只是安装在了你的博客地址目录下，而不是全局目录，所以你想要查看现在有哪些包，即打开博客文件夹下的：<strong>node_modules</strong>：这个文件夹包含了博客依赖的所有\r\nNode.js 模块，例如 Hexo 自身和其他插件。</p>\r\n<p>我们为了上传本地博客到网页端，需要安装一个工具</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cnpm install hexo-deployer-git</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"上传流程\">上传流程</h3>\r\n<p>在博客的文件夹的git bash中依次输入：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean           //清除 Hexo 生成的缓存文件和静态文件</span><br><span class=\"line\">hexo new &quot;文章名称&quot;   //新建文章</span><br><span class=\"line\">// 新建文章后，在 source-&gt;_posts文件夹中可以看到.md文件，进行编辑文件</span><br><span class=\"line\">hexo s              //文章预览，s是source的意思</span><br><span class=\"line\">hexo g              //generate的意思，生成文件</span><br><span class=\"line\">hexo d              //部署到github上</span><br></pre></td></tr></table></figure>\r\n<p><strong>之后每次上传博客都是此顺序，部署之后可发现GitHub中多了文件，此时浏览器输入，用户名.github.io(Github仓库名)就可以访问博客啦</strong></p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">这是全角空格：Em Space:<span class=\"symbol\">&amp;emsp;</span>(别忘了分号)  <span class=\"symbol\">&amp;ensp;</span>半角空格</span><br><span class=\"line\"></span><br><span class=\"line\">这是空行 ASCII码：<span class=\"symbol\">&amp;#160;</span></span><br><span class=\"line\"></span><br><span class=\"line\">这是换行 HTML：<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure>\r\n<p>A空格了吗？  B</p>\r\n<p>C 空行了吗？</p>\r\n<p> </p>\r\n<p>D换行了吗？<br></p>\r\n<h2 id=\"博客的进阶操作\">2.2 博客的进阶操作</h2>\r\n<p><em>说是进阶操作，其实就是为了让文章部署在网页时，可以满足一些在markdown中可以实现的基本需求，我的需求仅仅有四项</em>：</p>\r\n<p><strong>换个自己喜欢的主题，图片的上传管理、数学公式的编辑和每篇文章有个目录\r\nor 标签，便于文件夹管理访问</strong></p>\r\n<h3 id=\"主题更换\">1.主题更换</h3>\r\n<p>当前博客的主题是next哦~：<strong><a href=\"https://link.zhihu.com/?target=https%3A//github.com/next-theme/hexo-theme-next\">hexo-theme-next</a></strong>应该是目前最广泛使用的hexo主题了，优点是简洁，定制度高，因为代码是开源的，所以有很多开发者维护。由于前任管理员不提供权限，故开发了一个新的分支，<strong><a href=\"https://link.zhihu.com/?target=https%3A//github.com/next-theme/hexo-theme-next/issues/4%23issuecomment-626205848\">详情</a></strong>。</p>\r\n<p>打开你的博客文件夹的themes子文件夹，可以看到有哪些主题，默认应该就有一个landscape，是我们当时初始化hexo\r\ninit下载的</p>\r\n<p>在网站：https://hexo.io/themes/中可以找到很多主题</p>\r\n<p>这里以 hexo-theme-next\r\n这个主题为例做一下说明，打开你的博客根目录文件夹，在git bash中输入：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone --branch v7.8.0 https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class=\"line\"></span><br><span class=\"line\">git clone --branch v7.8.0 git@github.com:theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>\r\n<p>版本是自己选择的，下载以后会发展博客根目录文件下的\r\nthemes文件夹多了一个next文件夹，即我们下载的主题</p>\r\n<p>然后在博客根目录文件夹的站点配置文件_config.yml（之前1.4节配置绑定github时用过），\r\n找到 theme 字段，并将其后面的值更改为 next即可</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s //进入localhost:4000看看主题效果</span><br></pre></td></tr></table></figure>\r\n<p>需要修改此主题的一些内容细节：如增加评论，添加搜索，修改样式，增加广告等等等，可以参考修改next主题博客，如：</p>\r\n<p><a href=\"https://www.pengtech.net/hexo/\">hexo | 鹏叔的技术博客\r\n(pengtech.net)</a></p>\r\n<h3 id=\"图片的上传管理\">2.图片的上传管理</h3>\r\n<p>我尝试了很多方法，最后选择了图床的方式，即把图片上传到github上管理，而不是本地管理图片，网页在需要图片时从github页面获取即可</p>\r\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/319679704\">搭建一个免费图床！彻底解决博客文章中图片存储问题！\r\n- 知乎 (zhihu.com)</a></p>\r\n<p><strong>图床：</strong>图床（Image Hosting\r\nService）是指提供在线图片存储和管理服务的网络平台。用户可以将图片上传到图床服务器，然后通过生成的图片链接来分享图片或在网页上显示这些图片。</p>\r\n<h4 id=\"a.安装配置picgo\">A.<strong>安装配置PicGo</strong>：</h4>\r\n<p>PicGo\r\n是一个用于快速上传图片并获取图片URL链接的工具，选择合适的版本并下载，可访问PicGo的官方文档进一步了解其功能和用法。我使用的是\r\nwin10系统，下载的是最新的版本。下载可能会很慢，可借助迅雷进行下载。下载后双击进行安装，注意不要安装在C盘。</p>\r\n<figure>\r\n<img src=\"https://pic1.zhimg.com/80/v2-e1e7d47b39f0ee903719d460f26d9750_720w.webp\" alt=\"Github创建图床仓库\">\r\n<figcaption aria-hidden=\"true\">Github创建图床仓库</figcaption>\r\n</figure>\r\n<p>下载地址：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/Molunerfinn/PicGo/releases\">https://github.com/Molunerfinn/PicGo/releases</a></p>\r\n<p>使用指南：<a href=\"https://link.zhihu.com/?target=https%3A//picgo.github.io/PicGo-Doc/zh/guide/\">https://picgo.github.io/PicGo-D</a></p>\r\n<p>可以在PicGo设置中先设置一下自己的喜好，现在看不懂没关系，下面配完以后实际上传了一个图片就明白了（注：图床的功能很强大，这里我们只是用了很小的一部分，用来上传到自己的个人博客中）</p>\r\n<p>PicGo 支持的图床很多，如七牛图床、腾讯云 COS、阿里云 OSS、Github\r\n图床、Gitee 图床等等，我们当然用免费的Github或者Gitee啦</p>\r\n<h4 id=\"b.github新建一个仓库专门存放图片文件即图床仓库\">B.Github新建一个仓库专门存放图片文件，即图床仓库：</h4>\r\n<p><strong>新建Github仓库并生成Token：</strong></p>\r\n<ul>\r\n<li><p>注册 Github 用户</p></li>\r\n<li><p>在 Github 上新建一个用于存储的仓库，点击 New repository\r\n创建一个新仓库。</p></li>\r\n<li><p>生成一个 Personal access tokens</p></li>\r\n</ul>\r\n<p>在 Github 中依次点击<strong>Settings-&gt;Developer\r\nsettings-&gt;Personal access tokens-&gt;Generate new\r\ntoken</strong>，勾选 repo 权限，填写描述，然后点击 Generate token\r\n按钮，生成 token。由于生成的 token\r\n只会在第一次显示，建议<strong>保存下来备用</strong>，否则后续只能重新生成\r\ntoken。（一定要保存下来备用！！！）</p>\r\n<h4 id=\"c.打开picgo配置github图床\">C.打开PicGO配置Github图床</h4>\r\n<p>点击图床设置-&gt;Github图床：</p>\r\n<ul>\r\n<li>设定仓库名：按照照“用户名/仓库名”的格式填写，比如我的ning565/picblog（终究首反应还是没能驼峰命名）</li>\r\n<li>设定分支名：默认主分支 main 即可。</li>\r\n<li>设定 Token：将之前生成的 token 复制粘贴到这里。</li>\r\n<li>指定存储路径：github的那个图床仓库目录下的子目录，默认是根目录。</li>\r\n<li>设定自定义域名：自定义域名的作用是在上传图片后成功后，PicGo\r\n将以“自定义域名+子目录名+图片名”生成访问连接。这里我们的自定义域名为：<a href=\"https://link.zhihu.com/?target=https%3A//cdn.jsdelivr.net/gh/\">https://cdn.jsdelivr.net/gh/</a>用户名/仓库名，用的是<a href=\"https://link.zhihu.com/?target=http%3A//cdn.jsdelivr.net\">http://cdn.jsdelivr.net</a>提升图片的加载速度。</li>\r\n</ul>\r\n<h4 id=\"d.typora配置picgo\">D.Typora配置PicGo</h4>\r\n<p>我们每次写博客都是利用Typora软件，然后在其中插入图片等等，我们需要实现在Typora中插入的任一图片都直接通过PicGo软件上传到Github的图床仓库中，这样在hexo\r\nd上传博客时才能从图床仓库取图片</p>\r\n<p>依次点击Typora的文件 -&gt; 偏好设置 -&gt; 图像</p>\r\n<p>插入图片时选择上传图片</p>\r\n<p>上传服务设定中，上传服务选择PicGo，路径选择PicGo.exe所在路径，然后进行验证上传，等待一段时间，windows系统电脑右下角出现弹窗上传成功，即代表着成功上传，此时图片便成功部署了，每次直接在typora中放的图片都能直接显示在网页中</p>\r\n<h2 id=\"数学公式编辑\">3.数学公式编辑</h2>\r\n<p>参考：<a href=\"https://blog.csdn.net/qq_44846324/article/details/114582328\">这次彻底解决在Hexo中渲染MathJax数学公式出现的问题！！！_uninstall\r\nhexo-renderer-marked失败-CSDN博客</a></p>\r\n<p><a href=\"https://pku-zyf.github.io/formula/\">Hexo渲染数学公式：配置方法与原理浅释\r\n| 明 (pku-zyf.github.io)</a></p>\r\n<p><a href=\"https://xxxpt.blog.csdn.net/article/details/109052860\">用Github\r\nPages+Hexo搭建博客之(十)Hexo博客next主题MathJax数学公式渲染问题_github\r\n个人博客数学公式-CSDN博客</a></p>\r\n<p>在Markdown文档编写中，我们可以使用LATEX的语法输入数学公式。常见的Markdown编辑器如Typora都可以方便地渲染数学公式。然而，Hexo在默认设置下部署博客时，并不能渲染数学公式。</p>\r\n<p>原因在于，<strong>渲染数学公式需要使用MathJax</strong>（一种模块化的JavaScript框架）；而Hexo的默认渲染器是hexo-renderer-marked（在目录根目录下的modules看到）引擎，它并不支持MathJax。</p>\r\n<p>更换一个渲染引擎即可：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>\r\n<p>然后在主题next目录配置文件中_config.yml：</p>\r\n<p>修改perpage为true mathjax后面的enable为true</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Math Formulas Render Support</span><br><span class=\"line\">math:</span><br><span class=\"line\">  # Default (true) will load mathjax / katex script on demand.</span><br><span class=\"line\">  # That is it only render those page which has `mathjax: true` in Front-matter.</span><br><span class=\"line\">  # If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span><br><span class=\"line\">  per_page: true</span><br><span class=\"line\"></span><br><span class=\"line\">  # hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span><br><span class=\"line\">  mathjax:</span><br><span class=\"line\">    enable: true</span><br></pre></td></tr></table></figure>\r\n<p>切记：我最初在操作的时候，各种急着下载模块，不仅用了mathjax还用了很多modules，下载的很乱，一定先认准一个方法配置，如果配不好，先卸载了刚才下载的module，再重新找方法找module下载，某些module不能在一起共存的，欲速则不达</p>\r\n<h2 id=\"为文章设置目录标签\">4.为文章设置目录/标签</h2>\r\n<p>在博客文件夹根目录下打开Git bash，然后执行</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\r\n<p>此时，在source 目录中会生成一个 categories 文件夹，文件夹内有一个\r\nindex.md 文件，打开此文件，将其中的 type 字段的值修改为 categories</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\r\n<p>创建标签的方式一样：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br><span class=\"line\">//在tag文件夹中的index.md中</span><br><span class=\"line\">...</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\r\n<p>为每篇文章设置：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new &quot;文章名称&quot;</span><br></pre></td></tr></table></figure>\r\n<p>以后，在文章开头部分会自动添加如下内容：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: 博客搭建与发布教程</span><br><span class=\"line\">date: 2024-03-15 12:10:21</span><br><span class=\"line\">tags:</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- 入门使用</span><br></pre></td></tr></table></figure>\r\n<p>像我这样，在categories或者tages的下一行 输入：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- &quot;目录/标签名称&quot;   //注意减号后面的空格哦~</span><br></pre></td></tr></table></figure>\r\n<p>Contining~~~</p>\r\n<p>如果以后有用到其他的博客内容再更新嗷~</p>\r\n","categories":["入门使用"]},{"title":"Day1","url":"/2024/03/19/Day1/","content":"<h1 id=\"如何学习技术\">如何学习技术</h1>\r\n<p>1.八股入手教程，入个门，材料作为学习提纲，真正使用，实操，理论点实操去落地，项目去反作用理论</p>\r\n<p>2.简历做提纲：包装一些实习经历，做的项目，包装的项目中所做的内容，落地的东西，面试官深挖，深度参与度，思路</p>\r\n<p>3.平时去投递小厂/大厂，通过面试去练，日常都可以投，多面几次，出题内容等，查漏补缺，把平时面当成模拟面试，面试多总结</p>\r\n<h1 id=\"总体路线\">总体路线</h1>\r\n<p>现在想先找个日常实习，为自己打个底，目前的计划路线主要分为三步，分别是：</p>\r\n<ol type=\"1\">\r\n<li>Java基础的巩固 -&gt;\r\nJavaWeb开发（选学核心部分如SpringBoot）-&gt;直接开苍穹外卖项目，改项目，总结内容</li>\r\n<li>背八股：根据Java知识体系框架（JavaGuide和小林） +\r\n各大公司的面经开始背诵</li>\r\n<li>刷算法：起步开始刷或许很困难，坚持下来吧</li>\r\n</ol>\r\n<h1 id=\"规划\">规划</h1>\r\n<p>作为一个测了三次都是infj的纯种i规划人，上次写完了自己的一些背景和总体路线，当成一个情绪抒发文，在正式开始的第一天，想随便写一下自己以后要学些什么内容。</p>\r\n<p><strong>前期：</strong>在3月初参加了华为在西电的双选会，抱着试一试的心态投递了简历，结果今天接到了HR的电话，告诉我两件事：</p>\r\n<ol type=\"1\">\r\n<li><p>理论上实习生不能要我这样保完研的，因为不确定性太大了，只要应届生，这是规定；但是<strong>美赛的F奖</strong>是华为内部认可的，于是可以给我争取投一个见习的名额，标为优秀学生标签；</p></li>\r\n<li><p>投递的部门出现了问题，应该是ICT的计算产品线（\r\n因为这件事搞了好几次，自己一直在犯蠢o(╥﹏╥)o ）</p></li>\r\n</ol>\r\n<p>简历已经投递完毕了，大概的面试在4.5月份，所以还有充足的时间进行准备，所以现在想简单说一下准备的内容：</p>\r\n<p>还是上面的三个路线，只不过要具象化三个路线：</p>\r\n<ol type=\"1\">\r\n<li>先把<strong>黑马的外卖</strong>基本上过一遍，总结笔记内容，不会的地方及时搜索，整理，在过程中就自然而然学会了Java的一些内容如Redis等；</li>\r\n<li>日常的<strong>Leetcode</strong>刷题需要严格落实，每天至少1-2道题刷题，先刷hot\r\n100，再看华为的机试题，多刷，多总结，多反思，有代码启示录和labuladong算法小抄的加持，多看多总结多思考，不能光看不总结，自己的优点也是学习特点就是<strong>爱总结</strong>，保持<strong>好习惯</strong>；</li>\r\n<li>重点针对简历上的内容进行学习背诵，其次结合热门常考题，<strong>八股八股</strong>，就是背背背~在面试前看项目</li>\r\n</ol>\r\n<p><br></p>\r\n<p><strong>坚持学习，让乏味的生活多姿多彩。</strong></p>\r\n","categories":["进厂学习记录"]},{"title":"Day2","url":"/2024/03/20/Day2/","content":"<p>总结一下最近没来得及总结的内容与今日学习内容，由于Java\r\nWeb开发目前没学完，于是边学边补不会的内容：</p>\r\n<h1 id=\"项目开发\">项目开发</h1>\r\n<h2 id=\"软件开发与角色\">1.软件开发与角色</h2>\r\n<h3 id=\"软件开发\">软件开发</h3>\r\n<figure>\r\n<img\r\nsrc=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/image-20221106162815172.png\"\r\nalt=\"image-20221106162815172\" />\r\n<figcaption aria-hidden=\"true\">image-20221106162815172</figcaption>\r\n</figure>\r\n<p><strong>软件开发流程</strong>：</p>\r\n<p>需求分析：完成需求规格说明书、产品原型编写。</p>\r\n<p>设计：UI设计、数据库设计、接口设计</p>\r\n<p>编码：编写项目代码、并完成单元测试。</p>\r\n<p>测试：测试人员,对部署在测试环境的项目进行功能测试,\r\n并出具测试报告。</p>\r\n<p>上线运维：会由运维人员准备服务器上的软件环境安装、配置， 配置完毕后，\r\n再将我们开发好的项目，部署在服务器上运行。</p>\r\n<h3 id=\"角色分工\">角色分工</h3>\r\n<p><strong>招聘/升职岗位</strong>：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 33%\" />\r\n<col style=\"width: 27%\" />\r\n<col style=\"width: 39%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">岗位/角色</th>\r\n<th>对应阶段</th>\r\n<th style=\"text-align: left;\">职责/分工</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">项目经理</td>\r\n<td>全阶段</td>\r\n<td style=\"text-align: left;\">对整个项目负责，任务分配、把控进度</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">产品经理</td>\r\n<td>需求分析</td>\r\n<td\r\nstyle=\"text-align: left;\">进行需求调研，输出需求调研文档、产品原型等</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">UI设计师</td>\r\n<td>设计</td>\r\n<td style=\"text-align: left;\">根据产品原型输出界面效果图</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">架构师</td>\r\n<td>设计</td>\r\n<td style=\"text-align: left;\">项目整体架构设计、技术选型等</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\"><font color='red'>开发工程师</font></td>\r\n<td><font color='red'>编码</font></td>\r\n<td style=\"text-align: left;\"><font color='red'>功能代码实现</font></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">测试工程师</td>\r\n<td>测试</td>\r\n<td style=\"text-align: left;\">编写测试用例，输出测试报告</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">运维工程师</td>\r\n<td>上线运维</td>\r\n<td style=\"text-align: left;\">软件环境搭建、项目上线</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"大厂研发流程\">大厂研发流程</h3>\r\n<p>需求文档（确定需求包括的功能/确定开发包括的难点） -&gt;\r\n架构图（模块间的依赖关系，角色的分工） -&gt;\r\n确定协议（后端间，前后端间通讯协议，兼容性+易于维护） -&gt;\r\n设计数据结构和算法（格式/容器处理数据，算法大多直接调包） -&gt;\r\n预估容量与性能 -&gt; 考虑部署（环境，分布式，风险意识）-&gt;\r\n设计评审（彼此评审，多方面评价）-&gt;\r\n写代码（不仅在一个地方看到写代码是脑力活了）-&gt; 自测 -&gt;\r\n联调（费时费力，一定先自测好） -&gt; 交给测试岗 -&gt; code\r\nreview（反复修改） -&gt; 合入主干 -&gt; 发布（考虑兼容性）</p>\r\n<h2 id=\"sky项目初步介绍\">2.sky项目初步介绍</h2>\r\n<h3 id=\"技术栈\">技术栈</h3>\r\n<p><strong>用户层：</strong>系统管理后台的前端页面</p>\r\n<p><strong>网关层：</strong>Nginx是一个服务器，主要用来作为Http服务器，部署静态资源，访问性能高。</p>\r\n<p>Nginx中还有两个比较重要的作用： <strong>反向代理和负载均衡</strong>，\r\n在进行项目部署时，要实现Tomcat的负载均衡，就可以通过Nginx来实现。</p>\r\n<p><strong>应用层：</strong></p>\r\n<p>SpringBoot： 快速构建Spring项目, 采用 \"约定优于配置\" 的思想,\r\n简化Spring项目的配置开发。</p>\r\n<p>SpringMVC：SpringMVC是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合，可以无缝集成。</p>\r\n<p>Spring Task: 由Spring提供的定时任务框架。</p>\r\n<p>httpclient: 主要实现了对http请求的发送。</p>\r\n<p>Spring Cache: 由Spring提供的数据缓存框架</p>\r\n<p>JWT: 用于对应用程序上的用户进行身份验证的标记。</p>\r\n<p>阿里云OSS: 对象存储服务，在项目中主要存储文件，如图片等。</p>\r\n<p>Swagger： 可以自动的帮助开发人员生成接口文档，并对接口进行测试。</p>\r\n<p>POI: 封装了对Excel表格的常用操作。</p>\r\n<p>WebSocket:\r\n一种通信网络协议，使客户端和服务器之间的数据交换更加简单，用于项目的来单、催单功能实现。</p>\r\n<p><strong>数据层：</strong></p>\r\n<p>MySQL： <strong>关系型数据库</strong>,\r\n本项目的核心业务数据都会采用MySQL进行存储。</p>\r\n<p>Redis： 基于key-value格式存储的内存数据库, 访问速度快,\r\n经常使用它做<strong>缓存</strong>。</p>\r\n<p>Mybatis：\r\n本项目<strong>持久层</strong>（项目的持久层是指在软件开发中负责处理数据持久化的部分，也称为数据访问层或数据持久化层）将会使用Mybatis开发。</p>\r\n<p>pagehelper: 分页插件。</p>\r\n<p>spring data redis: 简化java代码操作Redis的API。</p>\r\n<p><strong>工具：</strong></p>\r\n<p>git: 版本控制工具, 在团队协作中,\r\n使用该工具对项目中的代码进行管理。</p>\r\n<p>maven: 项目构建工具。</p>\r\n<p>junit：单元测试工具，开发人员功能实现完毕后，需要通过junit对功能进行单元测试。</p>\r\n<p>postman:\r\n接口测工具，模拟用户发起的各类HTTP请求，获取对应的响应结果。</p>\r\n<figure>\r\n<img\r\nsrc=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/image-20221106185646994.png\"\r\nalt=\"image-20221106185646994\" />\r\n<figcaption aria-hidden=\"true\">image-20221106185646994</figcaption>\r\n</figure>\r\n<h3 id=\"idea搭建环境\"><strong>IDEA搭建环境</strong></h3>\r\n<p><strong>Git</strong>:<a\r\nhref=\"https://blog.csdn.net/weixin_43252521/article/details/123959391\">在\r\nIDEA 中使用 Git 图文教程_idea连接git-CSDN博客</a></p>\r\n<p>更改文件夹后出错，导致无法commit and push：</p>\r\n<p><a\r\nhref=\"https://blog.csdn.net/tcjy1000/article/details/127129224\">git\r\nfatal: detected dubious ownership in repository 解决方法_detected\r\ndubious ownership in repository at-CSDN博客</a></p>\r\n<p><strong>连接数据库</strong>：</p>\r\n<p><a\r\nhref=\"https://blog.csdn.net/Royalic/article/details/119604763\">超详细的Idea与MySQL的连接（从入门到精通）_idea连接数据库-CSDN博客</a></p>\r\n<p>更改mysql文件夹名称，出现ERROR2003:</p>\r\n<p><a\r\nhref=\"https://zhuanlan.zhihu.com/p/661201217\">【已解决】mysql：ERROR\r\n2003 (HY000): Can't connect to MySQL server on 'localhost:3306' (10061)\r\n- 知乎 (zhihu.com)</a></p>\r\n<h3 id=\"nginx作用\">nginx作用</h3>\r\n<h4 id=\"反向代理\">反向代理</h4>\r\n<p>前端请求地址：http://localhost/api/employee/login</p>\r\n<p>后端接口地址：http://localhost:8080/admin/employee/login</p>\r\n<p>很明显，两个地址不一致，那是如何请求到后端服务的呢？</p>\r\n<figure>\r\n<img\r\nsrc=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/image-20221107152041371.png\"\r\nalt=\"image-20221107152041371\" />\r\n<figcaption aria-hidden=\"true\">image-20221107152041371</figcaption>\r\n</figure>\r\n<p><strong>nginx 反向代理</strong>，就是将前端发送的动态请求由 nginx\r\n转发到后端服务器，而不是不直接发给后端</p>\r\n<p><strong>好处：</strong></p>\r\n<ul>\r\n<li><p>提高访问速度</p>\r\n<p>因为nginx本身可以进行缓存，如果访问的同一接口，并且做了数据缓存，nginx就直接可把数据返回，不需要真正地访问服务端，从而提高访问速度。</p></li>\r\n<li><p>进行负载均衡</p>\r\n<p>所谓负载均衡,就是把大量的请求按照我们指定的方式均衡的分配给集群中的每台服务器。</p></li>\r\n<li><p>保证后端服务安全</p>\r\n<p>因为一般后台服务地址不会暴露，所以使用浏览器不能直接访问，可以把nginx作为请求访问的入口，请求到达nginx后转发到具体的服务中，从而保证后端服务的安全。</p></li>\r\n</ul>\r\n<p><strong>配置：</strong></p>\r\n<p><strong>nginx 反向代理的配置方式 conf文件中：</strong></p>\r\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"section\">location</span> /api/&#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://localhost:8080/admin/; <span class=\"comment\">#反向代理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>proxy_pass：</strong>该指令是用来设置代理服务器的地址，可以是主机名称，IP地址加端口号等形式。</p>\r\n<h4 id=\"负载均衡\">负载均衡</h4>\r\n<p>当如果服务以集群的方式进行部署时，那nginx在转发请求到服务器时就需要做相应的负载均衡。其实，负载均衡从本质上来说也是基于反向代理来实现的，最终都是转发请求。</p>\r\n<p><strong>nginx 负载均衡的配置方式：</strong></p>\r\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> webservers&#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">192.168.100.128:8080</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">192.168.100.129:8080</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"section\">location</span> /api/&#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://webservers/admin;<span class=\"comment\">#负载均衡</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>upstream：</strong>如果代理服务器是一组服务器的话，我们可以使用upstream指令配置后端服务器组。</p>\r\n<p>如上代码的含义是：监听80端口号， 然后当我们访问\r\nhttp://localhost:80/api/../..这样的接口的时候，它会通过 location /api/\r\n{} 这样的反向代理到\r\nhttp://webservers/admin，根据webservers名称找到一组服务器，根据设置的负载均衡策略(默认是轮询)转发到具体的服务器。</p>\r\n<p><strong>注：</strong>upstream后面的名称可自定义，但要上下保持一致。</p>\r\n<p><strong>nginx 负载均衡策略：</strong></p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th><strong>名称</strong></th>\r\n<th><strong>说明</strong></th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>轮询</td>\r\n<td>默认方式</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>weight</td>\r\n<td>权重方式，默认为1，权重越高，被分配的客户端请求就越多</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>ip_hash</td>\r\n<td>依据ip分配方式，这样每个访客可以固定访问一个后端服务</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>least_conn</td>\r\n<td>依据最少连接方式，把请求优先分配给连接数少的后端服务</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>url_hash</td>\r\n<td>依据url分配方式，这样相同的url会被分配到同一个后端服务</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>fair</td>\r\n<td>依据响应时间方式，响应时间短的服务将会被优先分配</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"加密登录\">加密登录</h3>\r\n<p><strong>STEP1</strong>：修改数据库中的密码password值，为md5（一个hash算法）加密后的内容</p>\r\n<p><strong>STEP2</strong>：修改Java代码，将前端提交的代码通过md5加密再对比数据库中固定内容</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"导入接口文档\">导入接口文档</h3>\r\n<p><strong>方式：</strong>YApi导入.json数据 https://yapi.pro/</p>\r\n<p>YApi是一个开源的接口管理平台，它主要用于帮助团队更好地管理和维护API（Application\r\nProgramming Interface）接口文档。</p>\r\n<h3 id=\"后端自测\">后端自测</h3>\r\n<p><strong>利用Swagger</strong>：</p>\r\n<p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful\r\n风格的 Web 服务(<a href=\"https://swagger.io/\"\r\nclass=\"uri\">https://swagger.io/</a>)。 它的主要作用是：</p>\r\n<ol type=\"1\">\r\n<li><p>使得前后端分离开发更加方便，有利于团队协作</p></li>\r\n<li><p>接口的文档在线自动生成，降低后端开发人员编写接口文档的负担</p></li>\r\n<li><p>功能测试</p>\r\n<p>Spring已经将Swagger纳入自身的标准，建立了Spring-swagger项目，现在叫Springfox。通过在项目中引入Springfox\r\n，即可非常简单快捷的使用Swagger。</p></li>\r\n</ol>\r\n<p>目前都使用knife4j框架：Java\r\nMVC框架集成Swagger生成文档API增强解决方案</p>\r\n<p>1.导入Maven依赖 pox.xml</p>\r\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.xiaoymin<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\r\n<p>2.在配置类中加入 knife4j 相关配置</p>\r\n<p>3.设置静态资源映射，否则接口文档页面无法访问</p>\r\n<p>4.访问测试，接口文档路径在原路径后加入：/doc.html(静态资源映射)</p>\r\n<p>接口测试:测试登录功能</p>\r\n<p>Swagger常用注解：通过注解可以控制生成的接口文档，使接口文档拥有更好的可读性，常用注解如下：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 28%\" />\r\n<col style=\"width: 72%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th><strong>注解</strong></th>\r\n<th><strong>说明</strong></th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><strong><span class=\"citation\"\r\ndata-cites=\"Api\">@Api</span></strong></td>\r\n<td>用在类上，例如Controller，表示对类的说明</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><strong><span class=\"citation\"\r\ndata-cites=\"ApiModel\">@ApiModel</span></strong></td>\r\n<td>用在类上，例如entity、DTO、VO</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><strong><span class=\"citation\"\r\ndata-cites=\"ApiModelProperty\">@ApiModelProperty</span></strong></td>\r\n<td>用在属性上，描述属性信息</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><strong><span class=\"citation\"\r\ndata-cites=\"ApiOperation\">@ApiOperation</span></strong></td>\r\n<td>用在方法上，例如Controller的方法，说明方法的用途、作用</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>Swagger PK YApi</strong>：</p>\r\n<p>1、Yapi 是设计阶段使用的工具，管理和维护接口</p>\r\n<p>2、Swagger 在开发阶段使用的框架，帮助后端开发人员做后端的接口测试</p>\r\n<h2 id=\"实现功能\">3.实现功能</h2>\r\n<p>实现任何一个功能都要有如下几步：</p>\r\n<p><strong>需求分析与设计-&gt;代码开发-&gt;功能测试-&gt;代码完善</strong></p>\r\n<p>一般在做需求分析时，往往都是对照着产品原型进行分析，因为产品原型比较直观，便于我们理解业务，设计出来表单内容/文档/接口</p>\r\n<p><strong>代码开发</strong>是根据需求分析的内容，结合代码的原本框架，根据功能添加新的部分（选择实现功能的方法）</p>\r\n<p><strong>功能测试实现方式：</strong></p>\r\n<ul>\r\n<li>通过接口文档测试 swagger的doc/html，向后端发送数据</li>\r\n<li>通过前后端联调测试：nginx启动http服务，在前端直接发送数据到后端</li>\r\n</ul>\r\n<p><strong>代码完善：</strong>针对功能测试中程序出现的问题，调整代码的内容，接下来在实现功能中，我们将记录重点集中在<strong>代码开发和代码完善</strong></p>\r\n<h3 id=\"新增员工\">新增员工</h3>\r\n<h4 id=\"代码开发\">代码开发</h4>\r\n<p>根据新增员工接口设计对应的DTO（当前端提交的数据和实体类中对应的属性差别比较大时，建议使用DTO来封装数据）</p>\r\n<p><strong>什么是DTO？</strong></p>\r\n<p>Java是<strong>面向对象（object）的</strong>，在开发过程中，我们会封装各种各样的实体类</p>\r\n<p><a\r\nhref=\"https://zhuanlan.zhihu.com/p/680050977\">一篇文章带你搞懂Controller、Service等各层的功能与作用\r\n- 知乎 (zhihu.com)</a></p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 41%\" />\r\n<col style=\"width: 58%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th><strong>实体类</strong></th>\r\n<th><strong>说明</strong></th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>PO持久化对象（Persistent Object）</td>\r\n<td>用于表示数据库中的实体或表的映射 通常与数据库表的结构和字段对应\r\nPO的属性对应数据库表的字段，可以进行持久化操作（新增、查询、更新、删除）</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><strong>VO值对象（Value Object）</strong></td>\r\n<td>VO是值对象，用于封装数据，通常是不可变的，用于传递数据而不包含业务逻辑，VO可以用于在不同层之间传递数据，如前端和后端之间，后端的返回的到前端的数据只需要保留必要的字段就可以，将这些必要的字段封装起来就是VO</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>BO业务对象（Business Object）</td>\r\n<td>BO是业务对象，用于封装业务逻辑和操作包含与业务相关的方法和属性，用于实现业务规则和操作，BO通常与领域模型紧密相关，用于表示业务概念和业务流程</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>DO数据对象（Data/Domain Object）</td>\r\n<td>DO通常与BO和PO相对应，用于实现领域模型和业务逻辑，用于表示从数据存储中得到的数据</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>DAO数据访问对象（Data Access Object）</td>\r\n<td>DAO是数据访问对象，用于封装对数据库的访问操作，也就是我们常说的Dao层<br/>提供对数据库的增删改查等操作的接口<br/>DAO可以隐藏底层数据库的具体实现细节，使得业务逻辑层与数据库解耦</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><strong>DTO数据传输对象（Data Transfer Object）</strong></td>\r\n<td>DTO是<strong>数据传输对象</strong>，用于在不同层之间传输数据<br/>通常用于优化数据传输的性能和减少网络通信的开销。<br/>DTO可以封装多个对象的数据，以减少网络请求次数<br/>如果说VO一般用于前端和后端之后传输数据，那么DTO就是在后端的不同层之间传递数据，例如controller层和service层或者在服务之间结构调用的时候使用DTO</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>POJO普通Java对象（Plain Old Java Object）</td>\r\n<td>POJO是一个简单的Java对象，没有特定的限制和约束<br/>是一种普通的Java类，不依赖于特定的框架或接口</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>Service层：服务层</strong>\r\n由于Dao里面存放了对表操作的方法，entity类中存放了映射表的POJO类。Service的作用就是将Dao和entity类整合起来，进行再次封装，封装成一个方法，我们调用这个方法，就实现了对某个表的增删改查操作。</p>\r\n<p><strong>Controller：控制层</strong>\r\n负责请求转发，接受页面传递过来的参数，根据参数的不同，是调用不同的Service层方法进行操作，操作完成后将返回结果传递给页面。</p>\r\n<p><strong>数据访问层：</strong></p>\r\n<p><strong>Mapper：</strong>Mapper模式通常是指对象-关系映射（ORM）中的组件。它负责将<strong>领域对象和数据库表</strong>之间进行映射，实现数据的读取和写入。Mapper将<strong>数据库操作转换为对象操作</strong>，屏蔽了底层数据库的细节，使得开发人员可以使用<strong>面向对象</strong>的方式操作数据。\r\n它可以处理对象与关系型数据库之间的转换，包括查询、插入、更新和删除等操作。</p>\r\n<p><strong>DAO：</strong>DAO全称是（Data Access Objects)\r\n，数据库访问对象，主要的功能就是用于进行数据操作的，在程序的标准开发架构中属于数据访问层的操作。可以简单理解为一张数据表，就有一个DAO与之对应，与数据库的操作，增删改查等方法。DAO层可以实现对数据的持久化操作，使得业务逻辑可以通过DAO的接口来访问数据，而不需要关心具体的数据访问实现方式。</p>\r\n<p><strong>STEP1：自定义DTO类。</strong></p>\r\n<p>进入sky-pojo模块，在com.sky.dto包下，已定义EmployeeDTO</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sky.dto;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeDTO</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phone;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String idNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>STEP2：Controller层操作</strong></p>\r\n<p><strong>EmployeeController中创建新增员工方法</strong></p>\r\n<p>进入到sky-server模块中，在com.sky.controller.admin包下，在EmployeeController中创建新增员工方法，接收前端提交的参数。</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 新增员工</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@PostMapping</span></span><br><span class=\"line\">   <span class=\"meta\">@ApiOperation(&quot;新增员工&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> Result <span class=\"title function_\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> EmployeeDTO employeeDTO)</span>&#123;</span><br><span class=\"line\">       log.info(<span class=\"string\">&quot;新增员工：&#123;&#125;&quot;</span>,employeeDTO);</span><br><span class=\"line\">       employeeService.save(employeeDTO);<span class=\"comment\">//该方法后续步骤会定义</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>注：</strong>Result类定义了后端统一返回结果格式。（success(有无参数)\r\nerror）</p>\r\n<p><strong>STEP3：Service层接口与实现</strong></p>\r\n<p><strong>在EmployeeService接口中声明新增员工方法</strong></p>\r\n<p>进入到sky-server模块中,com.sky.server.EmployeeService</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 新增员工</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(EmployeeDTO employeeDTO)</span>;</span><br></pre></td></tr></table></figure>\r\n<p>在接口的实现中：</p>\r\n<p><strong>在EmployeeServiceImpl中实现新增员工方法</strong></p>\r\n<p>com.sky.server.impl.EmployeeServiceImpl中创建方法</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 新增员工</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//对象属性拷贝</span></span><br><span class=\"line\">       BeanUtils.copyProperties(employeeDTO, employee);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//设置账号的状态，默认正常状态 1表示正常 0表示锁定，StatusConstant表示状态常量</span></span><br><span class=\"line\">       employee.setStatus(StatusConstant.ENABLE);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//设置密码，默认密码123456，加密后的</span></span><br><span class=\"line\">       employee.setPassword(DigestUtils.md5DigestAsHex(PasswordConstant.DEFAULT_PASSWORD.getBytes()));</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//设置当前记录的创建时间和修改时间</span></span><br><span class=\"line\">       employee.setCreateTime(LocalDateTime.now());</span><br><span class=\"line\">       employee.setUpdateTime(LocalDateTime.now());</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//todo 设置当前记录创建人id和修改人id</span></span><br><span class=\"line\">       employee.setCreateUser(<span class=\"number\">10L</span>);<span class=\"comment\">//目前写个假数据，后期修改</span></span><br><span class=\"line\">       employee.setUpdateUser(<span class=\"number\">10L</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       employeeMapper.insert(employee);<span class=\"comment\">//后续步骤定义</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>STEP4：Mapper层</strong></p>\r\n<p><strong>在EmployeeMapper中声明insert方法</strong></p>\r\n<p>com.sky.EmployeeMapper中添加方法</p>\r\n<p>由于SQL语句不是很复杂，因而此处用注解@Insert实现：注意在values值后加的内容要用驼峰命名法（application.yml已开启驼峰命名），而不是和数据库中的名称一致</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 插入员工数据</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> employee</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Insert(&quot;insert into employee (name, username, password, phone, sex, id_number, create_time, update_time, create_user, update_user,status) &quot; +</span></span><br><span class=\"line\"><span class=\"meta\">           &quot;values &quot; +</span></span><br><span class=\"line\"><span class=\"meta\">           &quot;(#&#123;name&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;phone&#125;,#&#123;sex&#125;,#&#123;idNumber&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;,#&#123;createUser&#125;,#&#123;updateUser&#125;,#&#123;status&#125;)&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(Employee employee)</span>;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"功能测试\">功能测试</h4>\r\n<p><strong>1.接口文档测试</strong></p>\r\n<p><strong>启动服务：</strong>访问http://localhost:8080/doc.html，进入新增员工接口</p>\r\n<p>json数据：</p>\r\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;idNumber&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;111222333444555666&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;xiaozhi&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;phone&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;13812344321&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sex&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;username&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;小智&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\r\n<p>响应码：401\r\n报错，原因：JwtTokenAdminInterceptor拦截器，需要校验token，由于JWT令牌校验失败，导致EmployeeController的save方法没有被调用，被拦截器拦截了</p>\r\n<p><strong>解决方法：</strong>调用员工登录接口获得一个合法的JWT令牌，使用admin用户登录获取令牌，将合法的JWT令牌添加到全局参数中</p>\r\n<p>文档管理--&gt;全局参数设置--&gt;添加参数，使得每次发送的json信息都会增加一个token头部，是合法的令牌；</p>\r\n<p><strong>什么是JWT？</strong></p>\r\n<p>https://blog.csdn.net/java_mindmap/article/details/123343404</p>\r\n<p><strong>JWT概念</strong></p>\r\n<p>JWT ， 全写JSON Web Token,\r\n是开放的行业标准RFC7591，它定义了一种紧凑的、自包含的方式，用于作为JSON对象在各方之间安全地传输信息。该信息可以被验证和信任，因为它是数字签名的。</p>\r\n<p>JWT加密JSON，保存在客户端，不需要在服务端保存会话信息，可以应用在前后端分离的用户验证上，后端对前端输入的用户信息进行加密产生一个令牌字符串，\r\n前端再次请求时附加此字符串，后端再使用算法解密。</p>\r\n<p><strong>JWT使用场景：</strong></p>\r\n<ul>\r\n<li>Authorization (授权) :\r\n这是使用JWT的最常见场景。一旦用户登录，后续每个请求都将包含JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的JWT的一个特性，因为它的开销很小，并且可以轻松地跨域使用。</li>\r\n<li>Information Exchange (信息交换) :\r\n对于安全的在各方之间传输信息而言，JSON Web\r\nTokens无疑是一种很好的方式。因为JWT可以被签名，例如，用公钥/私钥对，你可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。</li>\r\n</ul>\r\n<p><strong>流程：</strong></p>\r\n<figure>\r\n<img\r\nsrc=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/56e4f404cc63cfc2ac31283c8e944613.png\"\r\nalt=\"56e4f404cc63cfc2ac31283c8e944613.png\" />\r\n<figcaption\r\naria-hidden=\"true\">56e4f404cc63cfc2ac31283c8e944613.png</figcaption>\r\n</figure>\r\n<p>JSON Web\r\nToken由三部分组成，它们之间用圆点(.)连接。这三部分分别是：</p>\r\n<ul>\r\n<li><p>Header：Header 部分是一个 JSON\r\n对象，存放Token类型和加密算法。加密算法常见的有MD5、SHA、HMAC（ Hash\r\nMessage Authentication Code）。</p></li>\r\n<li><p>Payload：存放有效信息，包括</p>\r\n<ul>\r\n<li>标准的声明，类似开发语言总的关键字，如\r\n<ul>\r\n<li>iss（Issuser） - 签发者</li>\r\n<li>sub Subject 面向主体</li>\r\n<li>aud Audience 接收方</li>\r\n<li>exp Expiration time 过期时间戳</li>\r\n<li>nbf Not Before, 开始生效时间戳</li>\r\n<li>iat(Issued at) 签发时间</li>\r\n<li>jti(JWT ID)： 唯一标识</li>\r\n</ul></li>\r\n<li>公共的声明：一般添加业务相关的必要信息，因为可解密，不建议敏感信息。</li>\r\n<li>私有的声明：提供者和消费者共同定义的声明，Base64对称解密，不建议敏感信息</li>\r\n</ul></li>\r\n<li><p>Signature签名：对前两个部分的签名，防止数据篡改。</p>\r\n<p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用\r\nHeader 里面指定的签名算法（默认是 HMAC\r\nSHA256），按照下面的公式产生签名。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HMACSHA256(</span><br><span class=\"line\">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class=\"line\">  base64UrlEncode(payload),</span><br><span class=\"line\">  secret)</span><br></pre></td></tr></table></figure>\r\n<p>算出签名以后，把 Header、Payload、Signature\r\n三个部分拼成一个字符串，每个部分之间用\"点\"（.）分隔，就可以返回给用户。</p>\r\n<p>secret-密钥\r\n使用header中声明的加密算法对Header和payload的加密连接字符串进行secret组合加密。密钥保存在服务端，服务端根据密钥进行解密验证。</p></li>\r\n</ul>\r\n<p>标准的声明，类似开发语言总的关键字</p>\r\n<p>格式：xxxx.yyyy.zzzz</p>\r\n<p><strong>java-jwt/jjwt</strong></p>\r\n<p>java-jwt是Java语言中推荐的JWT实现库，使用Maven导入如下：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\"> &lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class=\"line\"> &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;version&gt;<span class=\"number\">3.8</span><span class=\"number\">.3</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\r\n<p><strong>产生加密Token</strong></p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> JWT.create()</span><br><span class=\"line\">  .withExpiresAt(newDate(System.currentTimeMillis()))  <span class=\"comment\">//设置过期时间</span></span><br><span class=\"line\">  .withAudience(<span class=\"string\">&quot;user1&quot;</span>) <span class=\"comment\">//设置接受方信息，一般时登录用户</span></span><br><span class=\"line\">  .sign(Algorithm.HMAC256(<span class=\"string\">&quot;111111&quot;</span>));  <span class=\"comment\">//使用HMAC算法，111111作为密钥加密</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>解密Token获取负载信息并验证Token是否有效</strong></p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">userId</span> <span class=\"operator\">=</span> JWT.decode(token).getAudience().get(<span class=\"number\">0</span>);</span><br><span class=\"line\">Assertions.assertEquals(<span class=\"string\">&quot;user1&quot;</span>, userId);</span><br><span class=\"line\"><span class=\"type\">JWTVerifier</span> <span class=\"variable\">jwtVerifier</span> <span class=\"operator\">=</span> JWT.require(Algorithm.HMAC256(<span class=\"string\">&quot;111111&quot;</span>)).build();</span><br><span class=\"line\">jwtVerifier.verify(token);</span><br></pre></td></tr></table></figure>\r\n<p>所谓的Token，其实就是服务端生成的一串加密字符串、以作客户端进行请求的一个“令牌”。当用户第一次使用账号密码成功进行登录后，服务器便生成一个Token及Token失效时间并将此返回给客户端，若成功登陆，以后客户端只需在有效时间内带上这个Token前来请求数据即可，无需再次带上用户名和密码。</p>\r\n<p><strong>2.前后端联调测试</strong></p>\r\n<p>启动nginx,访问\r\nhttp://localhost，通过前端员工管理界面添加信息，查看emplyee表，发现测试成功</p>\r\n<h4 id=\"代码完善\">代码完善</h4>\r\n<p>目前，程序存在的问题主要有两个：</p>\r\n<ul>\r\n<li>录入的用户名已存在，抛出的异常后没有处理</li>\r\n<li>新增员工时，创建人id和修改人id设置为固定值</li>\r\n</ul>\r\n<p>接下来，我们对上述两个问题依次进行分析和解决。</p>\r\n<p><strong>问题一的解决</strong>：</p>\r\n<p>使得每次录入存在用户名时，前端会收到提示消息，通过全局异常处理器来处理，进入到sky-server模块，com.sky.hander包下，GlobalExceptionHandler.java添加方法</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 处理SQL异常</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> ex</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@ExceptionHandler</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> Result <span class=\"title function_\">exceptionHandler</span><span class=\"params\">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//Duplicate entry &#x27;zhangsan&#x27; for key &#x27;employee.idx_username&#x27;</span></span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> ex.getMessage();</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(message.contains(<span class=\"string\">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class=\"line\">           String[] split = message.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">           <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> split[<span class=\"number\">2</span>];</span><br><span class=\"line\">           <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> username + MessageConstant.ALREADY_EXISTS;<span class=\"comment\">//Message...是提前定义好的常量类</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> Result.error(msg);</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> Result.error(MessageConstant.UNKNOWN_ERROR);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>问题二的解决：</strong></p>\r\n<p><strong>在员工登录成功后会生成JWT令牌并响应给前端：</strong></p>\r\n<p>JWT响应过程：</p>\r\n<figure>\r\n<img\r\nsrc=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/image-20221111201922482.png\"\r\nalt=\"image-20221111201922482\" />\r\n<figcaption aria-hidden=\"true\">image-20221111201922482</figcaption>\r\n</figure>\r\n<p>后续请求中，前端会携带<strong>JWT令牌</strong>，通过JWT令牌可以<strong>解析出</strong>当前登录员工id，解析出登录员工id后，如何传递给Service的save方法？</p>\r\n<p>通过<strong>ThreadLocal</strong></p>\r\n<p>ThreadLocal 并不是一个Thread，而是Thread的局部变量。\r\nThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</p>\r\n<p><strong>常用方法：</strong></p>\r\n<ul>\r\n<li>public void set(T value) 设置当前线程的线程局部变量的值</li>\r\n<li>public T get() 返回当前线程所对应的线程局部变量的值</li>\r\n<li>public void remove() 移除当前线程的线程局部变量</li>\r\n</ul>\r\n<p>于是在初始工程中已经封装了 ThreadLocal\r\n操作的工具类前提下，修改代码：</p>\r\n<p>在拦截器中interceptor解析出当前登录员工id，并放入<strong>线程局部变量中\r\n-&gt;在Service中获取线程局部变量中的值</strong></p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"type\">Long</span> <span class=\"variable\">empId</span> <span class=\"operator\">=</span> Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;当前员工id：&quot;</span>, empId);</span><br><span class=\"line\">            <span class=\"comment\">/////将用户id存储到ThreadLocal////////</span></span><br><span class=\"line\">            BaseContext.setCurrentId(empId);</span><br><span class=\"line\">            <span class=\"comment\">///////////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在save方法中加入：</span></span><br><span class=\"line\">employee.setUpdateUser(BaseContext.getCurrentId());</span><br><span class=\"line\"><span class=\"comment\">//从线程池局部变量取值</span></span><br></pre></td></tr></table></figure>\r\n<p>即可完成创建人id的更新</p>\r\n<p>开始刷，随后有时间再去看acwing的算法基础课、提高课、labulagu等（侧重于系统化长时间学习，ACMer，针对思维）</p>\r\n","categories":["入厂学习记录"],"tags":["nginx","软件开发"]},{"title":"Day3","url":"/2024/03/21/Day3/","content":"<h1 id=\"算法\">算法</h1>\r\n<h2 id=\"编程素养\">编程素养</h2>\r\n<p>跟着代码随想录刷代码之前，看到了有一些编程的基本素养，先总结一下，养成一个良好的习惯再开始</p>\r\n<h3 id=\"命名\"><strong>命名</strong></h3>\r\n<p>主流有如下三种变量规则：</p>\r\n<ul>\r\n<li>小驼峰、大驼峰命名法</li>\r\n<li>下划线命名法</li>\r\n<li>匈牙利命名法</li>\r\n</ul>\r\n<p>小驼峰，第一个单词首字母小写，后面其他单词首字母大写。例如\r\n<code>int myAge;</code></p>\r\n<p>大驼峰法把第一个单词的首字母也大写了。例如：<code>int MyAge;</code></p>\r\n<p>通常来讲\r\njava和go都使用<strong>驼峰</strong>，C++的函数和结构体命名也是用大驼峰</p>\r\n<p>匈牙利命名法是：变量名 = 属性 + 类型 +\r\n对象描述，例如：<code>int iMyAge</code>，这种命名是一个来此匈牙利的程序员在微软内部推广起来，然后推广给了全世界的Windows开发人员。</p>\r\n<p>这种命名方式在没有IDE的时代，可以很好的提醒开发人员遍历的意义，例如看到iMyAge，就知道它是一个int型的变量，而不用找它的定义，缺点是一旦改变变量的属性，那么整个项目里这个变量名字都要改动，所以带来代码维护困难。</p>\r\n<h3 id=\"空格\"><strong>空格</strong></h3>\r\n<p>经常看到有的同学的代码都堆在一起，看起来都费劲，或者是有的间隔有空格，有的没有空格，很不统一，有的同学甚至为了让代码精简，把所有空格都省略掉了。</p>\r\n<ul>\r\n<li><p>操作符左右一定有空格 <code>i = i + 1'</code></p></li>\r\n<li><p>分隔符（<code>,</code>\r\n和<code>;</code>）前一位没有空格，后一位保持空格，例如：<code>int i, j</code></p></li>\r\n<li><p>大括号和函数保持同一行，并有一个空格例如：</p>\r\n<p><code>while (n) &#123;</code></p>\r\n<p>​ <code>n--;</code></p>\r\n<p><code>&#125;</code></p></li>\r\n<li><p>控制语句（while，if，for）后都有一个空格</p></li>\r\n</ul>\r\n<p>Google规范是 大括号和\r\n控制语句保持同一行的，我个人也很认可这种写法，因为可以缩短代码的行数，特别是项目中代码行数很多的情况下，这种写法是可以提高阅读代码的效率。</p>\r\n<p><strong>代码风格其实统一就行，没有严格的说谁对谁错</strong>。</p>\r\n<h3 id=\"库函数\"><strong>库函数</strong></h3>\r\n<p>如果题目关键的部分直接用库函数就可以解决，建议不要使用库函数。</p>\r\n<p>如果库函数仅仅是\r\n解题过程中的一小部分，并且你已经很清楚这个库函数的内部实现原理的话，那么直接用库函数。</p>\r\n<h3 id=\"核心模式-vs-acm模式\">核心模式 VS ACM模式</h3>\r\n<p>平时大家在力扣上刷题，就是\r\n核心代码模式，即给你一个函数，直接写函数实现，例如这样：</p>\r\n<figure>\r\n<img\r\nsrc=\"https://code-thinking-1253855093.file.myqcloud.com/pics/20231109193631.png\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>而ACM模式，是程序头文件，main函数，数据的输入输出都要自己处理，例如这样：</p>\r\n<figure>\r\n<img\r\nsrc=\"https://code-thinking-1253855093.file.myqcloud.com/pics/20231109193743.png\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>笔试的话，基本都是 ACM模式。</p>\r\n<p>面试的话，看情况，有的面试官会让你写一个函数实现就可以，此时就是核心代码模式。</p>\r\n<p>有的面试官会\r\n给你一个编辑器，让你写完代码运行一下看看输出结果，此时就是ACM模式。</p>\r\n<h3 id=\"markdown\">MarkDown</h3>\r\n<p>markdown所有用法：<a\r\nhref=\"https://markdown-it.github.io/\">markdown-it demo</a></p>\r\n<h2 id=\"力扣刷法\">力扣刷法</h2>\r\n<p>按照力扣的HOT\r\n100或剑指offer容易忘，所以推荐以下<strong>刷题方法：</strong></p>\r\n<p><strong>刷题条件：</strong>编程语言基础+数据结构算法的知识</p>\r\n<p><strong>分类刷题：</strong>按照模块，刷同模块的题</p>\r\n<ul>\r\n<li>数据结构篇：先刷基本的数据结构如数组，链表，栈和队列，堆，<strong>二叉树</strong>，字符串，哈希表；</li>\r\n<li>算法技巧篇：<strong>回溯算法、贪心算法、动态规划、排序</strong>、双指针法，滑动窗口，数学运算，等常见算法</li>\r\n</ul>\r\n<p><strong>刷题方式：</strong></p>\r\n<ul>\r\n<li><p>目前是跟着代码随想录的编排刷，拿到典型题目，先自己想，至少暴力算法有思路，然后看一下<strong>随想录的解法</strong>，理解其思想，带着算法思想阅读细节，最后自己写一遍；</p></li>\r\n<li><p>写完去查看一些高热度题解，适合自己的就是最好的，通过他人的题解来提高自己，弥补自己思考的不足。</p></li>\r\n<li><p>最后再看相同类型的题，自己写出来相同类型的题</p></li>\r\n</ul>\r\n<p><strong>循环刷题：</strong>第一遍过，第二遍过，过的基本差不多了，可以拿起来思考一下就懂思路时，直接上hot100或剑指offer这种系统性/框架性的刷</p>\r\n<p><strong>重点在及时复习</strong></p>\r\n<p>应试：使用<strong>codetop</strong></p>\r\n<p>codetop汇集了一些公司面试的高频题目，在具体准备某公司面试/笔试时，可以额外再刷这些高频题目</p>\r\n<h1 id=\"其他\">其他</h1>\r\n<p>根据<a\r\nhref=\"https://www.liaoxuefeng.com/wiki/896043488029600\">Git教程 -\r\n廖雪峰的官方网站 (liaoxuefeng.com)</a></p>\r\n<p>学习总结一下<strong>Git</strong>的基本用法</p>\r\n<h2 id=\"git简介\">1.Git简介</h2>\r\n<figure>\r\n<img\r\nsrc=\"https://www.liaoxuefeng.com/files/attachments/918921150461184/0\"\r\nalt=\"git-tutorial\" />\r\n<figcaption aria-hidden=\"true\">git-tutorial</figcaption>\r\n</figure>\r\n<p>官网介绍：</p>\r\n<p>Git is a <a\r\nhref=\"https://git-scm.com/about/free-and-open-source\">free and open\r\nsource</a> distributed version control system designed to handle\r\neverything from small to very large projects with speed and\r\nefficiency.Git is <a href=\"https://git-scm.com/doc\">easy to learn</a>\r\nand has a <a href=\"https://git-scm.com/about/small-and-fast\">tiny\r\nfootprint with lightning fast performance</a>. It outclasses SCM tools\r\nlike Subversion, CVS, Perforce, and ClearCase with features like <a\r\nhref=\"https://git-scm.com/about/branching-and-merging\">cheap local\r\nbranching</a>, convenient <a\r\nhref=\"https://git-scm.com/about/staging-area\">staging areas</a>, and <a\r\nhref=\"https://git-scm.com/about/distributed\">multiple workflows</a>.</p>\r\n<p>Git 是一个<a\r\nhref=\"https://git-scm.com/about/free-and-open-source\">免费开源</a>分布式版本控制系统，旨在快速高效地处理从小到大的项目。Git\r\n<a href=\"https://git-scm.com/doc\">易于学习</a> 并且<a\r\nhref=\"https://git-scm.com/about/small-and-fast\">占用空间小，性能快如闪电</a>\r\n。 它超越了 Subversion、CVS、Perforce 和 ClearCase 等 SCM 工具，具有<a\r\nhref=\"https://git-scm.com/about/branching-and-merging\">廉价的本地分支</a>、方便的<a\r\nhref=\"https://git-scm.com/about/branching-and-merging\">暂存区域</a>等功能\r\n/git-scm.com/about/staging-area）和<a\r\nhref=\"https://git-scm.com/about/distributed\">多个工作流程</a>。</p>\r\n<p>Git是目前世界上最先进的分布式版本控制系统</p>\r\n<h3 id=\"分布式版本控制\">分布式版本控制</h3>\r\n<p>用word写了长篇大论，不同时间写不同版本，就会_v几，_v几，想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去，就会变得很乱</p>\r\n<p>如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？</p>\r\n<p>每次改动都会像下面一样：</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">版本</th>\r\n<th style=\"text-align: left;\">文件名</th>\r\n<th style=\"text-align: left;\">用户</th>\r\n<th style=\"text-align: left;\">说明</th>\r\n<th style=\"text-align: left;\">日期</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">1</td>\r\n<td style=\"text-align: left;\">service.doc</td>\r\n<td style=\"text-align: left;\">张三</td>\r\n<td style=\"text-align: left;\">删除了软件服务条款5</td>\r\n<td style=\"text-align: left;\">7/12 10:38</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">2</td>\r\n<td style=\"text-align: left;\">service.doc</td>\r\n<td style=\"text-align: left;\">张三</td>\r\n<td style=\"text-align: left;\">增加了License人数限制</td>\r\n<td style=\"text-align: left;\">7/12 18:09</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">3</td>\r\n<td style=\"text-align: left;\">service.doc</td>\r\n<td style=\"text-align: left;\">李四</td>\r\n<td style=\"text-align: left;\">财务部门调整了合同金额</td>\r\n<td style=\"text-align: left;\">7/13 9:51</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">4</td>\r\n<td style=\"text-align: left;\">service.doc</td>\r\n<td style=\"text-align: left;\">张三</td>\r\n<td style=\"text-align: left;\">延长了免费升级周期</td>\r\n<td style=\"text-align: left;\">7/14 15:17</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>于是，Git便来了</p>\r\n<h2 id=\"git安装\">2.Git安装</h2>\r\n<p>最早Git是在Linux上开发的，很长一段时间内，Git也只能在Linux和Unix系统上跑。不过，慢慢地有人把它移植到了Windows上。现在，Git可以在Linux、Unix、Mac和Windows这几大平台上正常运行了。</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git //linux</span><br></pre></td></tr></table></figure>\r\n<p>在Windows上使用Git，可以从Git官网直接下载安装程序，然后按默认选项安装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git\r\nBash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p>\r\n<p>安装完成后，还需要最后一步设置，因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。</p>\r\n<p>在命令行输入：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git config --global user.name <span class=\"string\">&quot;Your Name&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git config --global user.email <span class=\"string\">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>\r\n<p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\r\n<h3 id=\"创建版本库\">创建版本库</h3>\r\n<p>什么是版本库呢？版本库又名仓库，英文名<strong>repository</strong>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>\r\n<p>所以，创建一个版本库非常简单：</p>\r\n<p><strong>STEP1</strong>:首先，选择一个合适的地方，创建一个空目录：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> learngit</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> learngit</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">pwd</span></span></span><br><span class=\"line\">/Users/michael/learngit</span><br></pre></td></tr></table></figure>\r\n<p><code>pwd</code>命令用于显示当前目录。在我的Mac上，这个仓库位于<code>/Users/michael/learngit</code>。</p>\r\n<p>(windows系统尽量不带中文)</p>\r\n<p><strong>STEP2:</strong></p>\r\n<p>第二步，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git init</span></span><br><span class=\"line\">Initialized empty Git repository in /Users/michael/learngit/.git/</span><br></pre></td></tr></table></figure>\r\n<p>可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。（如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见）</p>\r\n<h2 id=\"git本地使用\">3.Git本地使用</h2>\r\n<p>修改一个文件后，运行<strong><code>git status</code></strong>命令看看结果，<code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，<code>readme.txt</code>被修改过了，但还没有准备提交的修改。</p>\r\n<p>如果想具体看看修改了什么内容呢？需要用<strong><code>git diff</code></strong>这个命令:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git diff readme.txt</span> </span><br></pre></td></tr></table></figure>\r\n<p><code>git diff</code>顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第一行添加了一个<code>distributed</code>单词。</p>\r\n<p>知道了作什么修改后，将其提交到仓库：</p>\r\n<p>首先是<code>git add</code>：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git add readme.txt</span></span><br></pre></td></tr></table></figure>\r\n<p>同样没有任何输出。在执行第二步<code>git commit</code>之前，我们再运行<code>git status</code>看看当前仓库的状态，<code>git status</code>告诉我们，将要被提交的修改包括<code>readme.txt</code>，下一步，就可以放心地提交了：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit -m <span class=\"string\">&quot;add distributed&quot;</span></span></span><br><span class=\"line\">[master e475afc] add distributed</span><br><span class=\"line\"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>\r\n<p>提交后，我们再用<code>git status</code>命令看看仓库的当前状态。</p>\r\n<p>在Git中，我们用<code>git log</code>命令，就可以看到我们操作的日志</p>\r\n<p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数</p>\r\n<p><strong>退回到上个版本：</strong></p>\r\n<p>Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，上100个版本：<code>HEAD~100</code></p>\r\n<p>现在，我们要把当前版本<code>append GPL</code>回退到上一个版本<code>add distributed</code>，就可以使用<code>git reset</code>命令：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git reset --hard HEAD^</span></span><br><span class=\"line\">HEAD is now at e475afc add distributed</span><br></pre></td></tr></table></figure>\r\n<p>查看readme.txt内容：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> readme.txt</span></span><br></pre></td></tr></table></figure>\r\n<p>但是这样，最新的版本就没有了，回不到最新的版本了，log日志查看直接回到以前了，想回去：</p>\r\n<p>或者如果有commit id的话，可以直接：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git reset --hard 1094a</span></span><br></pre></td></tr></table></figure>\r\n<p>找不到commit id？：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git reflog</span></span><br></pre></td></tr></table></figure>\r\n<p>用来记录你的每一次命令，查看命令历史</p>\r\n<p>其实本质是：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌────┐</span><br><span class=\"line\">│HEAD│</span><br><span class=\"line\">└────┘</span><br><span class=\"line\">   │</span><br><span class=\"line\">   └──▶ ○ append GPL</span><br><span class=\"line\">        │</span><br><span class=\"line\">        ○ add distributed</span><br><span class=\"line\">        │</span><br><span class=\"line\">        ○ wrote a readme file</span><br></pre></td></tr></table></figure>\r\n<p><strong>Git操作的暂存区</strong></p>\r\n<p>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。</p>\r\n<p><strong>工作区（Working\r\nDirectory）</strong>：在电脑里能看到的目录</p>\r\n<p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的<strong>暂存区</strong>，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p>\r\n<figure>\r\n<img\r\nsrc=\"https://www.liaoxuefeng.com/files/attachments/919020037470528/0\"\r\nalt=\"git-repo\" />\r\n<figcaption aria-hidden=\"true\">git-repo</figcaption>\r\n</figure>\r\n<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p>\r\n<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\r\n<p><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支</p>\r\n<p>一旦提交以后，又没有对工作区做修改，工作区就变\"干净\"了：</p>\r\n<p>（<code>git status</code>随时都能查看状态）</p>\r\n<p>版本库变成了这样，暂存区就没有任何内容了：</p>\r\n<figure>\r\n<img\r\nsrc=\"https://www.liaoxuefeng.com/files/attachments/919020100829536/0\"\r\nalt=\"git-stage-after-commit\" />\r\n<figcaption aria-hidden=\"true\">git-stage-after-commit</figcaption>\r\n</figure>\r\n<p>Git跟踪并管理的是修改，而非文件</p>\r\n<p>修改两次文件，顺序变成：</p>\r\n<p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt;\r\n<code>git commit</code></p>\r\n<p>Git管理的是修改，当用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p>\r\n<p>修改以后必须add，才能进暂存区</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure>\r\n<p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p>\r\n<p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到<strong>和版本库</strong>一模一样的状态；</p>\r\n<p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到<strong>添加到暂存区后</strong>的状态。</p>\r\n<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>\r\n<p>在Git中，删除也是一个修改操作</p>\r\n<p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">rm</span> test.txt</span></span><br></pre></td></tr></table></figure>\r\n<p>确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code></p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">rm</span> test.txt</span></span><br><span class=\"line\">rm &#x27;test.txt&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit -m <span class=\"string\">&quot;remove test.txt&quot;</span></span></span><br><span class=\"line\">[master d46f35e] remove test.txt</span><br><span class=\"line\"> 1 file changed, 1 deletion(-)</span><br><span class=\"line\"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure>\r\n<p>现在，文件就从版本库中被删除了。</p>\r\n<p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure>\r\n<p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>\r\n<h2 id=\"远程仓库\">4.远程仓库</h2>\r\n<p>这个世界上有个叫<a\r\nhref=\"https://github.com/\">GitHub</a>的神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。</p>\r\n<p><strong>第1步：创建SSH\r\nKey</strong>。在用户主目录（windows1.在powershell：ssh-keygen -t rsa\r\n2.输入要保存密钥文件的路径和名称。例如：C:.ssh_rsa，可以选择保留默认名称，因为它已经被\r\nSSH\r\n所识别（id_rsa）3.在弹出的窗口中输入密码，或者直接敲击回车键选择不设置密码；\r\n4.得到公共密钥（id_rsa.pub）和一个私有密钥（id_rsa））下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git\r\nBash），创建SSH Key：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>\r\n<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p>\r\n<p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH\r\nKey的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p>\r\n<p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p>\r\n<p>然后，点“Add SSH\r\nKey”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容\r\n-&gt; 点“Add Key”，你就应该看到已经添加的Key</p>\r\n<p><strong>GitHub需要SSH\r\nKey：</strong>因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。（类似电子签名，私钥签名，公钥验证）</p>\r\n<p>GitHub允许添加多个Key，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了</p>\r\n<p>在GitHub上免费托管的Git仓库，任何人都可以看到（但只有自己才能改），可以设置公开的仓库变成私有的</p>\r\n<p><strong>注：可以搭一个Git服务器，因为是你自己的Git服务器，相当简单，公司内部开发必备</strong></p>\r\n<h3 id=\"添加远程仓库\">添加远程仓库</h3>\r\n<p>已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p>\r\n<p>Github创建仓库（首先，登陆GitHub，然后，在右上角找到“Create a new\r\nrepo”按钮，创建一个新的仓库）</p>\r\n<p>在<strong>Repository\r\nname</strong>填入<code>learngit</code>，其他保持默认设置，点击“Create\r\nrepository”按钮，就成功地创建了一个新的Git仓库</p>\r\n<p>目前，在GitHub上的这个<code>learngit</code>仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>\r\n<p>现在，我们根据GitHub的提示，在本地的<code>learngit</code>仓库下运行命令：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote add origin git@github.com:自己的用户名/learngit.git</span></span><br></pre></td></tr></table></figure>\r\n<p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p>\r\n<p>下一步，就可以把本地库的所有内容推送到远程库上：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push -u origin master</span></span><br></pre></td></tr></table></figure>\r\n<p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>\r\n<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\r\n<p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</p>\r\n<p>从现在起，只要本地作了提交，就可以通过命令：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push origin master</span></span><br></pre></td></tr></table></figure>\r\n<p>把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p>\r\n<p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">The authenticity of host &#x27;github.com (xx.xx.xx.xx)&#x27; can&#x27;t be established.</span><br><span class=\"line\">RSA key fingerprint is xx.xx.xx.xx.xx.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure>\r\n<p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p>\r\n<p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Warning: Permanently added &#x27;github.com&#x27; (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure>\r\n<p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p>\r\n<h3 id=\"删除远程仓库\">删除远程仓库</h3>\r\n<p>如果添加的时候地址写错了，或者就是想删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用<code>git remote -v</code>查看远程库信息：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote -v</span></span><br><span class=\"line\">origin  git@github.com:michaelliao/learn-git.git (fetch)</span><br><span class=\"line\">origin  git@github.com:michaelliao/learn-git.git (push)</span><br></pre></td></tr></table></figure>\r\n<p>然后，根据名字删除，比如删除<code>origin</code>：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote <span class=\"built_in\">rm</span> origin</span></span><br></pre></td></tr></table></figure>\r\n<p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p>\r\n","categories":["进厂学习记录"],"tags":["git用法","编程素养","算法"]},{"title":"Day4","url":"/2024/03/27/Day4/","content":"<h1 id=\"前言\">前言</h1>\r\n<p>最近这几天忙着毕业设计的中期答辩和一些形式工作，昨天和今天刚刚抽出时间来学习进厂知识，昨天刷了力扣的几道数组题，今天继续刷了链表的部分题，还有就是看了看外卖项目内容，感觉进度艰难，一些地方听不懂，而且学习的不系统，所以打算写完上次课的项目内容，从下次开始先暂停一下项目内容，先把基础的框架学一下，在JavaWeb开发篇中学习基础框架包括但不限于：<strong>SpringBoot、MySQL、Mybatis</strong>等，先把基础的框架弄明白，可能再去看项目会收获更大。</p>\r\n<h1 id=\"项目开发\">项目开发</h1>\r\n<p>接着上次，写完了新增员工，该写员工分页查询了</p>\r\n<h2 id=\"员工分页查询\">员工分页查询</h2>\r\n<h3 id=\"产品原型\">产品原型</h3>\r\n<p><strong>查询员工原型：</strong></p>\r\n<p><img src=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/image-20221111215309289.png\" alt=\"image-20221111215309289\" style=\"zoom: 67%;\" /></p>\r\n<p><strong>业务规则</strong>：</p>\r\n<ul>\r\n<li>根据页码展示员工信息</li>\r\n<li>每页展示10条数据</li>\r\n<li>分页查询时可以根据需要，输入员工姓名进行查询</li>\r\n</ul>\r\n<h3 id=\"代码开发\">代码开发</h3>\r\n<h4\r\nid=\"设置数据类型dto类主要是数据类型类的参数封装pageresult后面所有的分页查询统一都封装为pageresult对象\">1.设置数据类型——DTO类（主要是数据类型，类的参数），封装<strong>PageResult</strong>，后面所有的分页查询，统一都封装为PageResult对象</h4>\r\n<p>根据请求参数进行封装，在<em>sky-pojo模块</em>中</p>\r\n<p>在<em>sky-common模块</em>，封装PageResult对象，参数为</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">long</span> total; <span class=\"comment\">//总记录数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> List records; <span class=\"comment\">//当前页数据集合</span></span><br></pre></td></tr></table></figure>\r\n<p>员工信息分页查询后端返回的对象类型为: Result<PageResult></p>\r\n<h4\r\nid=\"controllerservicemapper层实现\">2.Controller、Service、Mapper层实现</h4>\r\n<p>在sky-server模块中，com.sky.controller.admin.EmployeeController中添加分页查询方法。</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 员工分页查询</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> employeePageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@GetMapping(&quot;/page&quot;)</span></span><br><span class=\"line\">   <span class=\"meta\">@ApiOperation(&quot;员工分页查询&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> Result&lt;PageResult&gt; <span class=\"title function_\">page</span><span class=\"params\">(EmployeePageQueryDTO employeePageQueryDTO)</span>&#123;</span><br><span class=\"line\">       log.info(<span class=\"string\">&quot;员工分页查询，参数为：&#123;&#125;&quot;</span>, employeePageQueryDTO);</span><br><span class=\"line\">       <span class=\"type\">PageResult</span> <span class=\"variable\">pageResult</span> <span class=\"operator\">=</span> employeeService.pageQuery(employeePageQueryDTO);<span class=\"comment\">//后续定义</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> Result.success(pageResult);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\r\n<p>在EmployeeService接口中声明<strong>pageQuery</strong>方法：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> employeePageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   PageResult <span class=\"title function_\">pageQuery</span><span class=\"params\">(EmployeePageQueryDTO employeePageQueryDTO)</span>;</span><br></pre></td></tr></table></figure>\r\n<p>接口声明以后要实现：</p>\r\n<p>在EmployeeServiceImpl中实现pageQuery方法：</p>\r\n<p>在EmployeeServiceImpl中实现pageQuery方法：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> employeePageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> PageResult <span class=\"title function_\">pageQuery</span><span class=\"params\">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// select * from employee limit 0,10</span></span><br><span class=\"line\">       <span class=\"comment\">//开始分页查询</span></span><br><span class=\"line\">       PageHelper.startPage(employeePageQueryDTO.getPage(), employeePageQueryDTO.getPageSize());</span><br><span class=\"line\"></span><br><span class=\"line\">       Page&lt;Employee&gt; page = employeeMapper.pageQuery(employeePageQueryDTO);<span class=\"comment\">//后续定义</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">long</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> page.getTotal();</span><br><span class=\"line\">       List&lt;Employee&gt; records = page.getResult();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageResult</span>(total, records);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>注意：</strong>此处使用 mybatis 的分页插件\r\n<strong>PageHelper</strong>\r\n来简化分页代码的开发（在pom.xml文中添加依赖），底层基于 mybatis\r\n的拦截器实现。</p>\r\n<p>Mapper层：</p>\r\n<p>在 EmployeeMapper 中声明 pageQuery 方法：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> employeePageQueryDTO</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   Page&lt;Employee&gt; <span class=\"title function_\">pageQuery</span><span class=\"params\">(EmployeePageQueryDTO employeePageQueryDTO)</span>;</span><br></pre></td></tr></table></figure>\r\n<p>在 src/main/resources/mapper/EmployeeMapper.xml 中编写SQL：</p>\r\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&lt;</span><span class=\"keyword\">select</span> id<span class=\"operator\">=</span>&quot;pageQuery&quot; resultType<span class=\"operator\">=</span>&quot;com.sky.entity.Employee&quot;<span class=\"operator\">&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> employee</span><br><span class=\"line\">        <span class=\"operator\">&lt;</span><span class=\"keyword\">where</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\">            <span class=\"operator\">&lt;</span>if test<span class=\"operator\">=</span>&quot;name != null and name != &#x27;&#x27;&quot;<span class=\"operator\">&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">and</span> name <span class=\"keyword\">like</span> concat(<span class=\"string\">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class=\"string\">&#x27;%&#x27;</span>)</span><br><span class=\"line\">            <span class=\"operator\">&lt;</span><span class=\"operator\">/</span>if<span class=\"operator\">&gt;</span></span><br><span class=\"line\">        <span class=\"operator\">&lt;</span><span class=\"operator\">/</span><span class=\"keyword\">where</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> create_time <span class=\"keyword\">desc</span></span><br><span class=\"line\">    <span class=\"operator\">&lt;</span><span class=\"operator\">/</span><span class=\"keyword\">select</span><span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"代码完善\">代码完善</h3>\r\n<p>发现问题：</p>\r\n<ol type=\"1\">\r\n<li>在前后端联调和Swagger测试（接口文档）时，发现操作时间格式不正确，</li>\r\n</ol>\r\n<p><strong>解决方式：</strong></p>\r\n<p><strong>1). 方式一</strong></p>\r\n<p>在属性上加上注解，对日期进行格式化</p>\r\n<p><img src=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/image-20221112103501581.png\" alt=\"image-20221112103501581\" style=\"zoom:67%;\" /></p>\r\n<p>但这种方式，需要在每个时间属性上都要加上该注解，使用较麻烦，不能全局处理。</p>\r\n<p><strong>2). 方式二（推荐 )</strong></p>\r\n<p>在WebMvcConfiguration中扩展SpringMVC的消息转换器，统一对所有的日期类型进行格式处理</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 扩展Spring MVC框架的消息转化器</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> converters</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">extendMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class=\"line\">       log.info(<span class=\"string\">&quot;扩展消息转换器...&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">//创建一个消息转换器对象</span></span><br><span class=\"line\">       <span class=\"type\">MappingJackson2HttpMessageConverter</span> <span class=\"variable\">converter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2HttpMessageConverter</span>();</span><br><span class=\"line\">       <span class=\"comment\">//需要为消息转换器设置一个对象转换器，对象转换器可以将Java对象序列化为json数据</span></span><br><span class=\"line\">       converter.setObjectMapper(<span class=\"keyword\">new</span> <span class=\"title class_\">JacksonObjectMapper</span>());</span><br><span class=\"line\">       <span class=\"comment\">//将自己的消息转化器加入容器中，设置index为0，优先级很高</span></span><br><span class=\"line\">       converters.add(<span class=\"number\">0</span>,converter);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\r\n<p>添加后，再次测试，发现日期正常</p>\r\n<h2 id=\"启用禁用员工账号\">启用/禁用员工账号</h2>\r\n<h3 id=\"代码开发-1\">代码开发</h3>\r\n<p><strong>启禁用员工原型：</strong></p>\r\n<p><img src=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/image-20221112112359233.png\" alt=\"image-20221112112359233\" style=\"zoom:67%;\" /></p>\r\n<p><strong>业务规则：</strong></p>\r\n<ul>\r\n<li>可以对状态为“启用” 的员工账号进行“禁用”操作</li>\r\n<li>可以对状态为“禁用”的员工账号进行“启用”操作</li>\r\n<li>状态为“禁用”的员工账号不能登录系统</li>\r\n</ul>\r\n<h4 id=\"controller层\">1.Controller层</h4>\r\n<p>在sky-server模块中，根据接口设计中的请求参数形式对应的在\r\nEmployeeController 中创建启用禁用员工账号的方法：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 启用禁用员工账号</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> status</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class=\"line\">   <span class=\"meta\">@ApiOperation(&quot;启用禁用员工账号&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> Result <span class=\"title function_\">startOrStop</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer status,Long id)</span>&#123;</span><br><span class=\"line\">       log.info(<span class=\"string\">&quot;启用禁用员工账号：&#123;&#125;,&#123;&#125;&quot;</span>,status,id);</span><br><span class=\"line\">       employeeService.startOrStop(status,id);<span class=\"comment\">//后绪步骤定义</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"service层接口和实现类\">2.Service层接口和实现类</h4>\r\n<p>在 EmployeeService 接口中声明启用禁用员工账号的业务方法：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 启用禁用员工账号</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> status</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> <span class=\"title function_\">startOrStop</span><span class=\"params\">(Integer status, Long id)</span>;</span><br></pre></td></tr></table></figure>\r\n<p>在 EmployeeServiceImpl 中实现启用禁用员工账号的业务方法：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 启用禁用员工账号</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> status</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startOrStop</span><span class=\"params\">(Integer status, Long id)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> Employee.builder()</span><br><span class=\"line\">               .status(status)</span><br><span class=\"line\">               .id(id)</span><br><span class=\"line\">               .build();</span><br><span class=\"line\"></span><br><span class=\"line\">       employeeMapper.update(employee);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"mapper层\">3.Mapper层</h4>\r\n<p>在 EmployeeMapper 接口中声明 update 方法：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 根据主键动态修改属性</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> employee</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Employee employee)</span>;</span><br></pre></td></tr></table></figure>\r\n<p>在 EmployeeMapper.xml 中编写SQL：</p>\r\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&lt;</span><span class=\"keyword\">update</span> id<span class=\"operator\">=</span>&quot;update&quot; parameterType<span class=\"operator\">=</span>&quot;Employee&quot;<span class=\"operator\">&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">update</span> employee</span><br><span class=\"line\">        <span class=\"operator\">&lt;</span><span class=\"keyword\">set</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\">            <span class=\"operator\">&lt;</span>if test<span class=\"operator\">=</span>&quot;name != null&quot;<span class=\"operator\">&gt;</span>name <span class=\"operator\">=</span> #&#123;name&#125;,<span class=\"operator\">&lt;</span><span class=\"operator\">/</span>if<span class=\"operator\">&gt;</span></span><br><span class=\"line\">            <span class=\"operator\">&lt;</span>if test<span class=\"operator\">=</span>&quot;username != null&quot;<span class=\"operator\">&gt;</span>username <span class=\"operator\">=</span> #&#123;username&#125;,<span class=\"operator\">&lt;</span><span class=\"operator\">/</span>if<span class=\"operator\">&gt;</span></span><br><span class=\"line\">            <span class=\"operator\">&lt;</span>if test<span class=\"operator\">=</span>&quot;password != null&quot;<span class=\"operator\">&gt;</span>password <span class=\"operator\">=</span> #&#123;password&#125;,<span class=\"operator\">&lt;</span><span class=\"operator\">/</span>if<span class=\"operator\">&gt;</span></span><br><span class=\"line\">            <span class=\"operator\">&lt;</span>if test<span class=\"operator\">=</span>&quot;phone != null&quot;<span class=\"operator\">&gt;</span>phone <span class=\"operator\">=</span> #&#123;phone&#125;,<span class=\"operator\">&lt;</span><span class=\"operator\">/</span>if<span class=\"operator\">&gt;</span></span><br><span class=\"line\">            <span class=\"operator\">&lt;</span>if test<span class=\"operator\">=</span>&quot;sex != null&quot;<span class=\"operator\">&gt;</span>sex <span class=\"operator\">=</span> #&#123;sex&#125;,<span class=\"operator\">&lt;</span><span class=\"operator\">/</span>if<span class=\"operator\">&gt;</span></span><br><span class=\"line\">            <span class=\"operator\">&lt;</span>if test<span class=\"operator\">=</span>&quot;idNumber != null&quot;<span class=\"operator\">&gt;</span>id_Number <span class=\"operator\">=</span> #&#123;idNumber&#125;,<span class=\"operator\">&lt;</span><span class=\"operator\">/</span>if<span class=\"operator\">&gt;</span></span><br><span class=\"line\">            <span class=\"operator\">&lt;</span>if test<span class=\"operator\">=</span>&quot;updateTime != null&quot;<span class=\"operator\">&gt;</span>update_Time <span class=\"operator\">=</span> #&#123;updateTime&#125;,<span class=\"operator\">&lt;</span><span class=\"operator\">/</span>if<span class=\"operator\">&gt;</span></span><br><span class=\"line\">            <span class=\"operator\">&lt;</span>if test<span class=\"operator\">=</span>&quot;updateUser != null&quot;<span class=\"operator\">&gt;</span>update_User <span class=\"operator\">=</span> #&#123;updateUser&#125;,<span class=\"operator\">&lt;</span><span class=\"operator\">/</span>if<span class=\"operator\">&gt;</span></span><br><span class=\"line\">            <span class=\"operator\">&lt;</span>if test<span class=\"operator\">=</span>&quot;status != null&quot;<span class=\"operator\">&gt;</span>status <span class=\"operator\">=</span> #&#123;status&#125;,<span class=\"operator\">&lt;</span><span class=\"operator\">/</span>if<span class=\"operator\">&gt;</span></span><br><span class=\"line\">        <span class=\"operator\">&lt;</span><span class=\"operator\">/</span><span class=\"keyword\">set</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"operator\">&lt;</span><span class=\"operator\">/</span><span class=\"keyword\">update</span><span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"编辑员工信息\">编辑员工信息</h2>\r\n<h3 id=\"代码开发-2\">代码开发</h3>\r\n<p><strong>修改页面原型</strong>：</p>\r\n<p>注：点击修改时，数据应该正常回显到修改页面。</p>\r\n<p><img src=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/image-20221112144842825.png\" alt=\"image-20221112144842825\" style=\"zoom: 67%;\" /></p>\r\n<h4 id=\"回显员工信息功能\">1.回显员工信息功能</h4>\r\n<p><strong>1). Controller层</strong></p>\r\n<p>在 EmployeeController 中创建 getById 方法：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 根据id查询员工信息</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">   <span class=\"meta\">@ApiOperation(&quot;根据id查询员工信息&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> Result&lt;Employee&gt; <span class=\"title function_\">getById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Long id)</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> employeeService.getById(id);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Result.success(employee);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\r\n<p>通过id查询</p>\r\n<p><strong>2). Service层接口和实现类</strong></p>\r\n<p>在 EmployeeService 接口中声明 getById 方法：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据id查询员工</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Employee <span class=\"title function_\">getById</span><span class=\"params\">(Long id)</span>;</span><br></pre></td></tr></table></figure>\r\n<p>在 EmployeeServiceImpl 中实现 getById 方法：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 根据id查询员工</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Employee <span class=\"title function_\">getById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> employeeMapper.getById(id);</span><br><span class=\"line\">      employee.setPassword(<span class=\"string\">&quot;****&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> employee;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>3). Mapper层</strong></p>\r\n<p>在 EmployeeMapper 接口中声明 getById 方法：通过注解实现</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 根据id查询员工信息</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Select(&quot;select * from employee where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">   Employee <span class=\"title function_\">getById</span><span class=\"params\">(Long id)</span>;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"修改员工信息功能\">2 修改员工信息功能</h4>\r\n<p><strong>1). Controller层</strong></p>\r\n<p>在 EmployeeController 中创建 update 方法：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 编辑员工信息</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@PutMapping</span></span><br><span class=\"line\">   <span class=\"meta\">@ApiOperation(&quot;编辑员工信息&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> Result <span class=\"title function_\">update</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> EmployeeDTO employeeDTO)</span>&#123;</span><br><span class=\"line\">       log.info(<span class=\"string\">&quot;编辑员工信息：&#123;&#125;&quot;</span>, employeeDTO);</span><br><span class=\"line\">       employeeService.update(employeeDTO);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>2). Service层接口</strong></p>\r\n<p>在 EmployeeService 接口中声明 update 方法：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 编辑员工信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(EmployeeDTO employeeDTO)</span>;</span><br></pre></td></tr></table></figure>\r\n<p><strong>3). Service层实现类</strong></p>\r\n<p>在 EmployeeServiceImpl 中实现 update 方法：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 编辑员工信息</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> employeeDTO</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">      <span class=\"comment\">//因为是DTO类型的，需要把参数赋给employee</span></span><br><span class=\"line\">      BeanUtils.copyProperties(employeeDTO, employee);</span><br><span class=\"line\"></span><br><span class=\"line\">      employee.setUpdateTime(LocalDateTime.now());</span><br><span class=\"line\">      employee.setUpdateUser(BaseContext.getCurrentId());</span><br><span class=\"line\"></span><br><span class=\"line\">      employeeMapper.update(employee);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\r\n<p>在实现<strong>启用禁用员工账号</strong>功能时，已实现employeeMapper.<strong>update</strong>(employee)，在此不需写Mapper层代码，只需要传进去参数。</p>\r\n<h1 id=\"算法\">算法</h1>\r\n<p><strong>数组篇</strong></p>\r\n<p><a href=\"https://www.programmercarl.com/\">代码随想录\r\n(programmercarl.com)</a></p>\r\n<h2 id=\"二分查找\">704.二分查找</h2>\r\n<p><a\r\nhref=\"https://leetcode.cn/problems/binary-search/\">力扣题目链接(opens\r\nnew window)</a></p>\r\n<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target\r\n，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回\r\n-1。</p>\r\n<h3 id=\"思路\">思路</h3>\r\n<p><strong>这道题目的前提是数组为有序数组</strong>，同时题目还强调<strong>数组中无重复元素</strong>，因为一旦有重复元素，使用二分查找法返回的元素下标可能不是唯一的，这些都是使用二分法的前提条件，当大家看到题目描述满足如上条件的时候，可要想一想是不是可以用二分法了。</p>\r\n<p>对于二分法，需要定义mid的前后两个区间，区间的定义就是不变量。要在二分查找的过程中，<strong>保持不变量</strong>，就是在while寻找中<strong>每一次边界的处理</strong>都要坚持根据区间的定义来操作，这就是循环不变量规则。</p>\r\n<p>写二分法，区间的定义一般为两种，左闭右闭即[left,\r\nright]，或者左闭右开即[left, right)</p>\r\n<ol type=\"1\">\r\n<li>区间的定义这就决定了二分法的代码应该如何写，<strong>因为定义target在[left,\r\nright]区间，所以有如下两点：</strong></li>\r\n</ol>\r\n<ul>\r\n<li>while (left &lt;= right) 要使用 &lt;= ，因为left ==\r\nright是有意义的，所以使用 &lt;=</li>\r\n<li>if (nums[middle] &gt; target) right 要赋值为 middle -\r\n1，因为当前这个nums[middle]一定不是target，那么接下来要查找的左区间结束下标位置就是\r\nmiddle - 1</li>\r\n</ul>\r\n<ol start=\"2\" type=\"1\">\r\n<li>如果说定义 target 是在一个在左闭右开的区间里，也就是[left, right)\r\n，那么二分法的边界处理方式则截然不同。</li>\r\n</ol>\r\n<ul>\r\n<li>while (left &lt; right)，这里使用 &lt; ,因为left ==\r\nright在区间[left, right)是没有意义的</li>\r\n<li>if (nums[middle] &gt; target) right 更新为\r\nmiddle，因为当前nums[middle]不等于target，去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为middle，即：下一个查询区间不会去比较nums[middle]</li>\r\n</ul>\r\n<h3 id=\"代码\">代码</h3>\r\n<p><strong>版本一</strong>：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 避免当 target 小于nums[0] nums[nums.length - 1]时多次循环运算</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target &lt; nums[<span class=\"number\">0</span>] || target &gt; nums[nums.length - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> left + ((right - left) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] == target)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target)</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target)</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>版本二</strong>：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, right = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> left + ((right - left) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] == target)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target)</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target)</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"移除元素\">27.移除元素</h2>\r\n<h3 id=\"思路-1\">思路</h3>\r\n<p><a\r\nhref=\"https://leetcode.cn/problems/remove-element/\">力扣题目链接(opens\r\nnew window)</a></p>\r\n<p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val\r\n的元素，并返回移除后数组的新长度。</p>\r\n<p>不要使用额外的数组空间，你必须仅使用 O(1)\r\n额外空间并<strong>原地</strong>修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\r\n<p><strong>要知道数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，只能覆盖。</strong></p>\r\n<p>暴力破解：两层循环，一个for循环遍历数组元素\r\n，第二个for循环更新数组</p>\r\n<p><strong>双指针法</strong>：</p>\r\n<p>双指针法（快慢指针法）：\r\n<strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p>\r\n<p>定义快慢指针</p>\r\n<ul>\r\n<li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li>\r\n<li>慢指针：指向更新 新数组下标的位置</li>\r\n</ul>\r\n<p>很多同学这道题目做的很懵，就是不理解\r\n快慢指针究竟都是什么含义，所以一定要明确含义，后面的思路就更容易理解了。</p>\r\n<p>删除过程如下：</p>\r\n<figure>\r\n<img\r\nsrc=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/27.%25E7%25A7%25BB%25E9%2599%25A4%25E5%2585%2583%25E7%25B4%25A0-%25E5%258F%258C%25E6%258C%2587%25E9%2592%2588%25E6%25B3%2595.gif\"\r\nalt=\"27.移除元素-双指针法\" />\r\n<figcaption aria-hidden=\"true\">27.移除元素-双指针法</figcaption>\r\n</figure>\r\n<p>很多同学不了解</p>\r\n<p><strong>双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组、链表、字符串等操作的面试题，都使用双指针法。</strong></p>\r\n<h3 id=\"代码-1\">代码</h3>\r\n<p><strong>快慢指针法</strong></p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">removeElement</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 快慢指针</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">slowIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">fastIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; fastIndex &lt; nums.length; fastIndex++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[fastIndex] != val) &#123;</span><br><span class=\"line\">                nums[slowIndex] = nums[fastIndex];</span><br><span class=\"line\">                slowIndex++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> slowIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>相向指针法</strong></p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//相向双指针法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">removeElement</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(right &gt;= <span class=\"number\">0</span> &amp;&amp; nums[right] == val) right--; <span class=\"comment\">//将right移到从右数第一个值不为val的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[left] == val) &#123; <span class=\"comment\">//left位置的元素需要移除</span></span><br><span class=\"line\">                <span class=\"comment\">//将right位置的元素移到left（覆盖），right位置移除</span></span><br><span class=\"line\">                nums[left] = nums[right];</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(right &gt;= <span class=\"number\">0</span> &amp;&amp; nums[right] == val) right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"有序数组的平方\">27.有序数组的平方</h2>\r\n<h3 id=\"思路-2\">思路</h3>\r\n<p><a\r\nhref=\"https://leetcode.cn/problems/squares-of-a-sorted-array/\">力扣题目链接(opens\r\nnew window)</a></p>\r\n<p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方\r\n组成的新数组，要求也按 非递减顺序 排序。</p>\r\n<p><strong>暴力：</strong>每个数平方之后，排个序，代码如下：</p>\r\n<p><strong>双指针法：</strong></p>\r\n<p>数组其实是有序的， 只不过负数平方之后可能成为最大数了。</p>\r\n<p>那么数组平方的<strong>最大值就在数组的两端</strong>，不是最左边就是最右边，不可能是中间。此时可以考虑双指针法了，i指向起始位置，j指向终止位置。</p>\r\n<p>定义一个新数组result，和A数组一样的大小，让k指向result数组终止位置。</p>\r\n<p>如果<code>A[i] * A[i] &lt; A[j] * A[j]</code>\r\n那么<code>result[k--] = A[j] * A[j];</code> 。</p>\r\n<p>如果<code>A[i] * A[i] &gt;= A[j] * A[j]</code>\r\n那么<code>result[k--] = A[i] * A[i];</code> 。</p>\r\n<p><strong>从两端开始，太妙了</strong></p>\r\n<h3 id=\"代码-2\">代码</h3>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] sortedSquares(<span class=\"type\">int</span>[] nums) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[nums.length];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt;= r)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[l] * nums[l] &gt; nums[r] * nums[r])&#123;</span><br><span class=\"line\">                res[j--] = nums[l] * nums[l++];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                res[j--] = nums[r] * nums[r--];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>若不从两端开始，从中间开始，找到第一个负数在哪里，向两端逐渐把最小的平方数放进结果数组，然后再把剩下的数组内容平方加到result中：</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] sortedSquares(<span class=\"type\">int</span>[] nums) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到负数的第一个坐标</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">negative</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                negative = i;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] ans = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, i = negative, j = negative + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> || j &lt; n) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//理论上处理完一个指针，直接将剩下未处理的指针全部赋值即可，分两步</span></span><br><span class=\"line\">            <span class=\"comment\">//以下思路是合并处理两步</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                ans[index] = nums[j] * nums[j];</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j == n) &#123;</span><br><span class=\"line\">                ans[index] = nums[i] * nums[i];</span><br><span class=\"line\">                --i;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[i] * nums[i] &lt; nums[j] * nums[j]) &#123;</span><br><span class=\"line\">                ans[index] = nums[i] * nums[i];</span><br><span class=\"line\">                --i;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans[index] = nums[j] * nums[j];</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ++index;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2\r\nid=\"在排序数组中查找元素的第一个和最后一个位置\">34.在排序数组中查找元素的第一个和最后一个位置</h2>\r\n<p>给你一个按照非递减顺序排列的整数数组 <code>nums</code>，和一个目标值\r\n<code>target</code>。请你找出给定目标值在数组中的开始位置和结束位置。</p>\r\n<p>如果数组中不存在目标值 <code>target</code>，返回\r\n<code>[-1, -1]</code>。</p>\r\n<p>你必须设计并实现时间复杂度为 <code>O(log n)</code>\r\n的算法解决此问题。</p>\r\n<h3 id=\"思路代码\">思路代码</h3>\r\n<p><strong>直接解法：</strong>直接遍历所有内容，记录start和end，如果找到了目标值，找到第一个为此值的index为start值，一直遍历直到记最后一个为此value的index为end值</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] searchRange(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>, end = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//不能先使用nums[0]，因为nums=[]就已经越界了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.length == <span class=\"number\">0</span> || nums[<span class=\"number\">0</span>] &gt; target || nums[nums.length-<span class=\"number\">1</span>]&lt; target)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;start,end&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] == target)&#123;</span><br><span class=\"line\">                end = i;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(start == - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    start = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;start,end&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>二分：</strong>两次二分法分别寻找start和end，第一次二分寻找start，找到target以后，记此次index为start，同时，<strong>右端区间变成此时index左边的（右端向左缩）</strong>，即区间右端不断向左缩达到二分，继续找左边有target的位置，一直到找到第一个；</p>\r\n<p>第二次二分找end，因为是要找最左区间向右缩，找到任何一个target，将左区间继续向右走，一直到找到最后一个target</p>\r\n<p>没找到target时与二分处理步骤一致</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] searchRange(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>, end = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//不能使用nums[0]，因为nums=[]就已经越界了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span> || nums[<span class=\"number\">0</span>] &gt; target || nums[nums.length - <span class=\"number\">1</span>] &lt; target)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;start, end&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//寻找第一个位置,左区间不变，右区间一直在向左缩</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] == target) &#123;</span><br><span class=\"line\">                start = mid;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;<span class=\"comment\">//核心，一直向左缩，直到找到第一个target位置</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//寻找第二个位置，左区间一直向右靠</span></span><br><span class=\"line\">        left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        right = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] == target) &#123;</span><br><span class=\"line\">                end = mid;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;<span class=\"comment\">//核心</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;start, end&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"长度最小的子数组\">27.长度最小的子数组</h2>\r\n<p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥\r\ns 的长度最小的 连续\r\n子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p>\r\n<p>示例：</p>\r\n<ul>\r\n<li>输入：s = 7, nums = [2,3,1,2,4,3]</li>\r\n<li>输出：2</li>\r\n<li>解释：子数组 [4,3] 是该条件下的长度最小的子数组。</li>\r\n</ul>\r\n<h3 id=\"思路-3\">思路</h3>\r\n<p><strong>暴力解法：</strong>这道题目暴力解法当然是\r\n两个for循环，然后不断地寻找符合条件的子序列，时间复杂度很明显是O(n^2)。</p>\r\n<p><strong>双指针：（又为滑动窗口）</strong></p>\r\n<p>只用一个for循环，那么这个循环的索引，一定是表示\r\n滑动窗口的终止位置。</p>\r\n<ul>\r\n<li><p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p></li>\r\n<li><p>窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向0前移动了（也就是该缩小了）。</p></li>\r\n<li><p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针00，也就是for循环里的索引。</p></li>\r\n</ul>\r\n<p>即看作是队列：</p>\r\n<p><code>[2,3,1,2,4,3]</code> 举例</p>\r\n<figure>\r\n<img\r\nsrc=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/10ca012c2f0170afcac5e5996add20c32c36a82f4bb4a6187897bb948ace5fe2-image.png\"\r\nalt=\"image.png\" />\r\n<figcaption aria-hidden=\"true\">image.png</figcaption>\r\n</figure>\r\n<figure>\r\n<img\r\nsrc=\"https://cdn.jsdelivr.net/gh/Ning565/picblog@main/img/2da8cf86a2a3df3c95ed7d95add574dca2d8bae8420addd0fa6b8c55fa3db081-image.png\"\r\nalt=\"image.png\" />\r\n<figcaption aria-hidden=\"true\">image.png</figcaption>\r\n</figure>\r\n<p>数组内的一直入队出队：</p>\r\n<p>起初一直入队，直到队列中的元素大于目标值了，记录此时的num数，才能出队</p>\r\n<p>出队以后如果总和小于目标值了，继续入队下一个数组元素，直到大于目标值，取此时num和之前num较小者</p>\r\n<p>直到所有数组元素完成，此时num就是最小长度的子数组</p>\r\n<h3 id=\"代码-3\">代码</h3>\r\n<p>快慢指针思想，是连续子数组，不是任意的数都可以</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minSubArrayLen</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length, slowIndex = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>, minLen = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">fastIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; fastIndex &lt; len; fastIndex++) &#123;</span><br><span class=\"line\">            sum += nums[fastIndex];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (sum &gt;= target) &#123;</span><br><span class=\"line\">                minLen = Math.min(minLen, fastIndex - slowIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">                sum -= nums[slowIndex++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minLen == Integer.MAX_VALUE ? <span class=\"number\">0</span> : minLen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","categories":["进厂学习记录"],"tags":["算法","SpringBoot","MySQL"]},{"title":"JavaWeb开发","url":"/2024/03/20/JavaWeb%E5%BC%80%E5%8F%91/","content":"\r\n"},{"title":"Java基础知识随记","url":"/2024/03/20/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%9A%8F%E8%AE%B0/","content":"\r\n"}]